<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="qlogo.ico">
	<title>Qmedia Player</title>
 	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>	
	<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/smoothness/jquery-ui.css" />
	<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
	<script src="jquery.ui.touch-punch.min.js"></script>
	<script type="text/javascript" src="../SHIVA/shivalib-min.js?version=2017-03-07-v1"></script>
 
	<style type="text/css">
		body { 			font-family:Verdana,Geneva,sans-serif; font-size:9px; }
		.qm-rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		tr.odd { 		background-color:#e0e0e0; }
		.ui-autocomplete { max-height: 300px; overflow-y: auto; }
	
 		.qm-unselectable { -moz-user-select: none;     -khtml-user-select: none;
		   			 	-webkit-user-select: none;  -ms-user-select: none;   user-select: none;
		   				}
		.qm-splash { 	text-align:center;position:absolute;top:100px;left:200px;
						}
		.qm-base { 		font-family:Verdana,Geneva,sans-serif;
						}	
		.qm-title { 	font-family:Verdana,Geneva,sans-serif; font-size:x-large;color:#fff;
						padding:8px;margin:0px;font-weight:bold;
						-moz-border-radius:4px;-webkit-border-radius:4px;-khtml-border-radius:4px;border-radius:4px;
						background-color:#ccc;
					  	}
		.qm-control { 	padding:4px;margin:0px;margin-top:6px;
						-moz-border-radius:6px;-webkit-border-radius:6px;-khtml-border-radius:6px;border-radius:6px;
						background-color:#ccc;
						} 
		.qm-scrubber { 	
						}	
		.qm-slideControls { 	
						}	
		.qm-contents { 	font-family:Verdana,Geneva,sans-serif; font-size:13px; 
						padding:0px; margin:0px;padding-right:16px;background-color:#fff;border-top:8px solid #fff;
						} 
		.qm-contentsText{
						height:90%;overflow:auto;margin-top:16px;opacity:inherit;
						}
		.qm-trans { 	font-family:Verdana,Geneva,sans-serif; font-size:13px;
						margin:0px; padding:0px;padding-right:8px;padding-left:16px;
						overflow:hidden;background-color:#fff;border-top:8px solid #fff;
						cursor:pointer;
						}
		.qm-transText { height:90%;overflow:auto;margin-top:16px;padding-right:8px;opacity:inherit;
						}
		.qm-transHigh {	background-color:#ddeeff;
						}
		.qm-transSearch { position:absolute;top:0px;white-space:nowrap;opacity:inherit;
						}
		.qm-slide { 	overflow:hidden;
						}
		.qm-player { 	overflow:hidden;
						}
		.qm-info { 		font-family:Verdana,Geneva,sans-serif; font-size:13px;
						margin:0px; padding:0px;background-color:#fff;border-top:8px solid #fff;
						overflow:hidden;
						}
		.qm-infoText {  height:100%;overflow:hidden;margin-top:16px;opacity:inherit;
						}
		.qm-infoMap { 	position:absolute;top:0px;white-space:nowrap;opacity:inherit;display:none;
						}
		.qm-labels { 	font-family:Verdana,Geneva,sans-serif; font-size:16px;
						color:#999;font-weight:bold;background-color:#fff;
						}
		.qm-timeDisp { 	font-family:Verdana,Geneva,sans-serif; font-size:9px;
						color:#666;width:100px;display:inline-block;text-align:center;
						}
		.qm-prompt { 	font-family:Verdana,Geneva,sans-serif; font-size:10px;
						color:#000;width:100%;text-align:right;padding-top:4px;background-color:#fff;
						}
		.qm-is {		border-radius:10px;padding-left:8px;padding-right:8px;padding-top:1px;
						border:1px solid #999;font-size:12px;height:20px;width:200px;
						}
		.qm-bs {		border-radius:10px;padding-left:8px;padding-right:8px;padding-top:1px;
						border:1px solid #999;font-size:12px;height:20px;color:#666;
						}
		.qm-ccaption { 	position:absolute;top:75%;text-align:center;color:yellow;
						font-size:16px;text-shadow:2px 2px 0px #000;margin:16px;
						}

 	</style>

	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	  ga('create', 'UA-49268159-1', 'qmediaplayer.com');
	  ga('send', 'pageview');
	</script>

</head>
<body>
<div id="splashDiv" class="qm-splash"><img src="qlogo.png"></div>
<div id="showDiv" style="padding:0px;margin:0px;opacity:0;" class="qm-base">
	<div id="titleDiv" style="position:absolute;opacity:inherit" class="qm-title qm-unselectable"></div>
	<div id="playerDiv" style="position:absolute;opacity:inherit" class="qm-player qm-unselectable"></div>
	<div id="slideDiv" style="position:absolute;opacity:inherit" class="qm-slide qm-unselectable"></div>
	<div id="controlDiv" style="position:absolute;opacity:inherit" class="qm-control qm-unselectable">
		<div style="width:100%;height:6px;background-color:#fff;position:absolute;top:-6px;"></div>
	  	<img id="playBut" src="images/playbut.gif" onclick="RunPlayer('play')" title="Play video" style="vertical-align:-4px;cursor:pointer">
   		<div id="timeDisp" class="qm-timeDisp qm-unselectable"></div>
   		<div style="display:inline-block" id="slider" class="qm-scrubber"></div>&nbsp;&nbsp;
	   	<img src="images/settingsbut.gif" id="settings" title="Settings menu" style="vertical-align:-2px;cursor:pointer"><span style="vertical-align:1px">&nbsp;&nbsp;</span>
   		<span id="slideControlsDiv" class="slideControls">
	  		<img src="images/startdot.gif" onclick="RunSlide('last')" title="Go to previous slide" style="vertical-align:-2px;cursor:pointer"><span style="vertical-align:1px">&nbsp;&nbsp;|&nbsp;</span>
	   		<img src="images/enddot.gif" onclick="RunSlide('next')" title="Go to next slide" style="vertical-align:-2px;cursor:pointer">&nbsp;
		</span>
	</div>
	<div id="playerSiz" style="position:absolute;width:8px;cursor:col-resize;opacity:inherit" class="qm-unselectable" title="Resize player">
		<div id="playerSiz1" style="position:absolute;width:40px;height:100%;left:-16px" qm-class="qm-unselectable"></div>
	</div>
	<div id="contentDiv" style="position:absolute;top:0px;opacity:inherit" class="qm-contents qm-unselectable">
		<span id="contentsLab" class="qm-labels"></span>
		<div id="contentsText" class="qm-contentsText"></div>
	</div>
	<div id="transDiv" style="position:absolute;opacity:inherit" class="qm-trans">
		<span id="transLab" class="qm-labels qm-unselectable"></span>
		<div id="transSearchDiv" class="qm-transSearch"> 
			<input style='width:100px;font-size:13px;border:1px solid #ddd' id='transSearch'>
  			<img src="images/settingsbut.gif" id="transSettings" title="Transcript menu" style="vertical-align:-2px;cursor:pointer">
	  	</div>
  		<div id="transcriptText" class="qm-transText"></div>
 	</div>
	<div id="infoDiv" style="position:absolute;opacity:inherit" class="qm-info">
		<span id="infoLab" class="qm-labels qm-unselectable"></span>
		<div id="infoMapDiv" class="qm-infoMap"> 
 			<img src="images/mapbut.gif" id="infomap" title="Show content map" style="cursor:pointer;opacity:0"> &nbsp;
 			<img src="images/annotate.gif" id="annotate" width="11" title="Annotate" style="cursor:pointer">
	  	</div>
		<div id="informationText" class="qm-infoText"></div>
	</div>
	<div id="transHgt" style="position:absolute;width:1000px;height:10px;cursor:row-resize" class="qm-unselectable" title="Change transcript height">
			<p id="prompt" class="qm-prompt">The University of Virginia</p>
			<div id="botMarkup"></div>
	</div>
	<div id="transSiz" style="position:absolute;width:8px;cursor:col-resize;opacity:inherit" class="qm-unselectable" title="Resize transcript">
		<div id="transSiz1" style="position:absolute;width:20px;height:100%;top:32px;left:0px" class="qm-unselectable"></div>
	</div>
	<div id="cache0" style="display:none"></div><div id="cache1" style="display:none"></div><div id="cache2" style="display:none"></div><div id="cache3" style="display:none"></div>
</div>
<div id="overlayDiv" style="position:absolute;left:0px;pointer-events:none;overflow:hidden;"></div>
<script>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var sd=null;																// Holds show data
	var showPanes=4;															// Number of panes in show
	var playerPane=0;															// Pane number of player
	var slidePane=1;															// Pane number of slides
	var transPane=2;															// Pane number of transcript
	var infoPane=3;																// Pane number of info area
	var showVectors=new Array();												// Timing vectors
	var showCurSource=new Array();												// Current sources
	var paneAnimationTimer=null;												// Times pane animations
	var imageAnimationTimer=[];													// Times image animations
	var player=null;															// Holds player object
	var playerNow=0;															// Current time in secs
	var playerTime=null;														// Timer
	var playerMode="empty";														// State of player
	var playerType="";															// Type of player
	var	playerCurTime=0;														// Current time
	var	playerTRT=0;															// Total running time
	var playerZen=false;														// Zen mode
	var playerNotes=false;														// Annotator
	var playerHgt=0,playerWid=0;												// Source height/width
	var notesText="";															// No notes
	var isMobile=false;															// Flag for mobile devices
	var curAssess=-1;															// Currently active assessment						
	var shivaLib=null;															// Holds shiva
	var searchMode=false;														// Don't trigger anything
	var keyFlag="";																// Holds key flags												
	var host="//qmediaplayer.com/";												// Set host
	var playerStarted=-1;														// Player started
	var userName="",password="",curShow=0;										// Login info
	var loopStart=loopEnd=0,loopLast=-1;										// Looping
	var lastClickTime=0;														// Store last click time
	var drupalMan=false;														// Flag for drupal manager	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INIT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	$(document).ready(function() {												// When loaded
		var i;
		if (window.addEventListener) 											// If supported this way
			window.addEventListener("message",shivaEventHandler,false);			// Add event handler
		else																	// Use other method
			window.attachEvent("message",shivaEventHandler);					// Add handler
		
		isMobile=navigator.userAgent.match(/(ipad|iphone|ipod|android)/i) ? true : false; // Set mobile flag
		var url=window.location.search.substring(1);							// Get query string
		drupalMan=(""+url).match(/pr=d/);										// If called from Drupal manager
		if (!url)																// Nothing on command line
			url=1;																// Use default
		if (drupalMan)	host=url="";											// If drupal, kill url
		if (url && !isNaN(url)) {												// If a number
			curShow=url;														// Save show number											
			url="./loadshow.php?id="+url;						// Get from db
			}	
		else if ((url) && (!url.match(/\./)))									// No file extension
			url+=".json";														// Add txt
		$.ajax({ url: url, dataType:'jsonp' });									// Get jsonp and call LoadShow() from it

		$("#slider").slider({													// Init slider
			slide: function(event,ui ) {										// Handle change
				keyFlag=""
				if (event.shiftKey)	keyFlag+="s";								// Add flag for key
				if (event.ctrlKey)	keyFlag+="c";								// Add flag for key
				if (event.altKey)	keyFlag+="a";								// Add flag for key
				RunPlayer("scrub",ui.value,true);								// Show
				},
			stop: function(event,ui ) {											// Handle stop
				showCurSource[slidePane]="reload";								// Force reload
				RunPlayer("scrub",ui.value);									// Show
				}
			});

		$("#playerSiz").draggable({												// DRAG PLAYER WIDTH HANDLER
			cursorAt:{left:16},	iframeFix:true,									// Cursor offset
			cursor: "col-resize", axis:"x",										// X-only
			start: function(event, ui) {										// On drag start
				$("#playerSiz1").css({ width:"500px", left:"-500px" });			// Widen hiding div
				},
			drag: function(event, ui) {											// On drag
				var wid=Math.min($("body").width(),sd.width);					// Cap at screen size
				if ((" "+sd.width).match("%"))									// If % in width
					wid=$("body").width()*(sd.width.replace(/%/,"")/100);		// Get proper width											
			 	sd.playerSlideRatio=Math.max(0,Math.min(1,(event.clientX-8)/(wid+16)));	// Set ratio between windows
				if (Math.abs(sd.playerSlideRatio-.5) < .01) 					// If close to center
					sd.playerSlideRatio=.5;										// Snap it there
				ResizePanes();													// Resize panes
				},
			stop: function(event, ui) {											// On drag end
				$("#playerSiz1").css({ width:"40px", left:"-16px" });			// Contract hiding div
				ResizePanes();													// Resize panes
				SendShivaMessage("ShivaAct=playerwid",sd.playerSlideRatio);		// Send that position has changed
				}
			});
			
		$("#transHgt").draggable({												// DRAG TRANSCRIPT HEIGHT HANDLER		
			cursor: "row-resize", axis:"y",										// Y-only
			stop: function(event, ui) {											// When done
				SendShivaMessage("ShivaAct=transhgt",sd.transHgt);				// Send that position has changed
				ResizePanes;													// Resize panes when done
				},
			drag: function(event, ui) {											// On drag
				sd.transHgt=Math.max(event.clientY-$("#controlDiv").css("top").replace(/px/,"")*1-$("#controlDiv").height(),0)-32;  // Set hgt
				ResizePanes();													// Resize panes
				}
			});

		$("#playerSiz").hover(													// Player width
			function(){ $(this).css("background-color","#acc3db")},				// Highlight
			function(){ $(this).css("background-color","transparent")			// Hide
		});

		$("#settings").on("click", function(e) {								// SETTINGS HANDLER
			if ($("#setpopup").length) {										// If open
				$("#setpopup").hide('slide',{direction:'down'},300, function(){ $("#setpopup").remove() });	// Hide, then remove it
				return;															// Quit
				}
			var w=190;
			var x=$("#controlDiv").width()-w-12;
			var str="<table><tr height='18'><td>Volume</td>";
			str+="<td><div style='display:inline-block;width:100px' id='pVolume'></div></td></tr>"
			str+="<tr height='18'><td>Speed</td>";
			str+="<td><div style='display:inline-block;width:100px' id='pSpeed'></div></td></tr>"
			str+="<tr height='18'><td>Quality</td><td>";
			str+=MakeSelect("pQuality",false,["Default","Good","Better","Best"],sd.playerQuality,"style='font-size:10px'")+"</td></tr>";
			str+="<tr><td>Take notes</td><td><input id='pNotes' type='checkbox'></td></tr>";
			str+="<tr><td>Zen mode</td><td><input id='pZen' type='checkbox'></td></tr>";
			str+="</table>";
			$("body").append("<div id='setpopup' style='display:none;position:absolute;width:"+w+"px;height:auto;background-color:#f8f8f8;left:"+x+"px;top:"+y+"px;border:1px solid #ccc;padding:8px'>"+str+"</div>");
			var y=$("#controlDiv").css("top").replace(/px/,"")-$("#setpopup").height()-11;			
			$("#pZen").prop("checked",playerZen);								// Set Zen box
			$("#pNotes").prop("checked",playerNotes);							// Set Notes box
			$("#setpopup").css("top",y);										// Position above control bat
			$("#setpopup").show('slide',{direction:'down'},300);				// Show it
			
			$("#pVolume").slider({ value:sd.playerVolume,						// VOLUME HANDLER 
				change: function(event, ui) {									// On change
					sd.playerVolume=ui.value;									// Set param
					RunPlayer("volume",sd.playerVolume);						// Do it
					}
				});

			$("#pSpeed").slider({ value:sd.playerSpeed,step:25,					// SPEED CHANGE
				change: function(event, ui) {									// On change
					sd.playerSpeed=ui.value;									// Set param
					RunPlayer("speed",sd.playerSpeed);							// Do it
					}
				});
	
			$("#pQuality").on("change", function(e) {							// VIDEO QUALITY HANDLER
				sd.playerQuality=$("#pQuality").val();							// Set param
				RunPlayer("quality",sd.playerQuality);							// Do it
				});

			$("#pZen").on("click", function(e) {								// ZEN MODE HANDLER
				playerZen=$("#pZen").prop("checked");							// Set Zen mode
				$("#setpopup").remove();										// Remove it
				ResizePanes();													// Redraw
				});
			$("#pNotes").on("click", function(e) {								// NOTES MODE HANDLER
				playerNotes=$("#pNotes").prop("checked");						// Set  mode
				$("#setpopup").remove();										// Remove it
				VideoNotes();													// Hide/show notes				
				});

			});																	// End settings
		playerTimer=setInterval(OnPlayerTimer,200);								// Set timer ~5ps
	});

	function LoadShow(show)													// LOAD SHOW CONTENT
	{
		if (show.qmfmsg == "private") {											// If private
			$("#splashDiv").html("<h1>Sorry, this show is marked private.</h1>");// Show it's private
			return;																// Quit
			}	
		searchMode=false;														// Allow other events
		if ((show.curShow != undefined) && (!curShow))							// If a show spec'd
			curShow=show.curShow;												// Make this current show
		if (show.logIn == "true") 												// If requiring a log in
			Login();															// Get un/pw
		if (show.playerAspect == undefined) 									// No aspect spec'd
			show.playerAspect=0.5625;											// Assign one
		if (show.playerSlideRatio == undefined) 								// No ratio spec'd
			show.playerSlideRatio=0.5;											// Assign one
		if (show.transInfoRatio == undefined)									// No ratio spec'd
			show.transInfoRatio=0.5;											// Assign one
		if (show.playerStart == undefined) 										// No start spec'd
			show.playerStart=0.0;												// Assign one
		if (show.playerStop == undefined) 										// No start spec'd
			show.playerStop=600.0;												// Assign one
		if (show.extCSS) 														// If an external CSS file declared
		    $("head").append($("<link rel='stylesheet' type='text/css' href='"+show.extCSS+"'>"));
 		sd=show;
		$("#playBut").css("opacity",sd.noPlay ? 0 : 1);							// Hide/show play button
		for (i=0;i<4;++i) {														// For each show pane
			showVectors[i]=[];													// Create timing vector arrays 
			showCurSource[i]="";												// No source yet
			}
		MakeVectors(0,show.playerVectors);										// Make player timing list
		MakeVectors(1,show.slideVectors);										// Make slides timing list
		MakeVectors(2,show.transVectors);										// Make transcript timing list
		MakeVectors(3,show.infoVectors);										// Make info timing list
		$("#titleDiv").html(show.title);										// Set title
		$("#contentsLab").html(show.contentsLab);								// Set label
			$("#transLab").html(show.transLab);									// Set label
		$("#infoLab").html(show.infoLab);										// Set label
		$("#slider").slider("option","max",show.playerStop);					// Set timeline end
		notesText="";															// No notes
		MakeIndex(show.indexVectors);											// Fill TOC contents
		MakeTranscript();														// Load transcript
		$("#slideControlsDiv").css("display","initial");						// Show controls
		if (!show.slideVectors)													// If no slides
			$("#slideControlsDiv").css("display","none");						// Hide controls
		var tag=document.createElement('script');								// Create script

//////////////////////////
//sd.playerSource="wgl/avatar.dae&s=100&l=sync&a=.16";
//////////////////////////	
	
		if (!show.playerSource) {												// No scrubbable media
			sd.noPlay=true;														// No playing
			playerType="noplayer";												// No player
			player=1;															// Put something there
			playerMode="pause";													// We're paused
			RunPlayer("ready");													// Init show
			if (sd.noPlay)														// If no playing
				$("#playBut").css("opacity",0);									// Hide button
			$("#playerDiv").html("");											// Clear player
			}
		else if (show.playerSource.match(/\.obj|\.dae/i)) {						// If a 3D model
			playerType="wgl";													// Set type
			RunPlayer("init");													// Init player
			}
		else if (show.playerSource.match(/\/\//i)) {							// If HTML5
			if (player && (playerType == "html5")) {							// Player not active loaded
				if (player.currentSrc.indexOf(sd.playerSource) == -1)	{		// Different clip
					var base=sd.playerSource.match(/(.*)\.[^.]+$/i)[1];			// Extract base
					if (sd.playerSource.match(/\.mp3/i)) 						// If audio
						player.src=base+".mp3";									// MP3 Source
					else{														// VIDEO
						player.src=base+".mp4";									// MP4 Source
						player.src=base+".ogg";									// OGG Source
						player.src=base+".webm";								// WEBM Source
						}
					player.load();												// Load it
					}
				}
			else{
				playerType="html5";												// Set type
				RunPlayer("init");												// Init player
				}
			}
		else if (!isNaN(show.playerSource)) {									// If Vimeo
			playerType="vimeo";													// Set type
			RunPlayer("init");													// Init player
			}
		else{																	// If YouTube
			playerType="youtube";												// Set type
			if (player) {														// Player active 
				if (!player.pauseVideo)	{										// If not YT player set
					if (YT.Player)												// If library is loaded
						RunPlayer("init");										// Re-init
					else{														// Load YT api
						var tag=document.createElement('script');				// Create script
						tag.src="//www.youtube.com/iframe_api";					// Set api url
						var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
						firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
						}
					}
				else{															// Player is active
					if (player.getVideoUrl().indexOf(sd.playerSource) == -1)	// Different clip
						player.loadVideoById(show.playerSource);				// Reload clip
					else
						player.seekTo(sd.playerStart);							// Seek to start point
					if (sd.playerAuto == "true")								// If autoplay
						player.playVideo();										// Play video
					}
				}
			else{																// API not loaded yet
				var tag=document.createElement('script');						// Create script
				tag.src="//www.youtube.com/iframe_api";							// Set api url
				var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
				firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
				}
			}
		ResizePanes();															// Resize panes
		Prompt("");																// Clear initial prompt
		if (show.initialPrompt != undefined)									// If a prompt set
			Prompt(show.initialPrompt);											// Show initial prompt
		$("#botMarkup").html("");												// Erase html at bottom
		if (show.botMarkup != undefined)										// If markup set
			$("#botMarkup").html(show.botMarkup);								// Show html at bottom
		$("#slideDiv").html("");												// Clear slides
		$("#informationText").html("");											// Clear info
		$("#overlayDiv").html("");												// Clear player
		RunPlayer("show");
		playerTimer=setInterval(OnPlayerTimer,200);								// Set timer ~5ps
		window.parent.postMessage("ShowReady=true","*");						// Send message to parent window	
		}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PANES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function ResizePanes()													// RESIZE PANES
	{ 
		var pt=8;
		var r1=sd.playerSlideRatio;												// Ratio 1
		var r2=sd.transInfoRatio;												// Ratio 2
		if (playerZen) {														// In Zen mode
			r1=r2=1;															// Make screen full
			$("#infoDiv").css("display","none");								// Hide info	
			$("#contentDiv").css("display","none");								// Contents
			$("#transDiv").css("display","none");								// Transcript
			$("#titleDiv").css("display","none");								// Title
			}
		else{																	// Normal mode
			$("#infoDiv").css("display","initial");								// Show info
			$("#contentDiv").css("display","initial");							// Contents
			$("#transDiv").css("display","initial");							// Transcript
			$("#titleDiv").css("display","initial");							// Title
			}
		var wid=Math.min($("body").width(),sd.width);							// Cap at screen size
		if ((" "+sd.width).match("%"))											// If % in width
			wid=$("body").width()*(sd.width.replace(/%/,"")/100);				// Get proper width											
		$("#showDiv").width(wid);												// Set show width
		$("#transHgt").width(wid);												// Set width
		$("#titleDiv").width(wid-16);											// Set title width
		var w=wid*r1-4;															// Player width
		var w2=wid-w-8;															// Slide width
		if (w <= 0)				w=0,w2=wid;										// Full slide											
		else if (w2 <= 0)		w2=0,w=wid;										// Full video											
		if (sd.title)															// If a title defined
			pt+=$("#titleDiv").height()+24;										// Top of player
		else																	// No title
			$("#titleDiv").css("display","none")								// Hide bar
		var h=Math.max(((wid-4)*sd.playerAspect)-(w*sd.playerAspect),w*sd.playerAspect);	// Player height
		$("#playerDiv").css({ width:w+"px",top:pt+"px"});						// Set player pos
		$("#overlayDiv").css({ width:w+"px",top:pt+"px",height:h+"px",left:"8px"});	// Set overlay
		$("#slideDiv").css({ left:(wid-w2+8)+"px",width:(w2)+"px",top:pt+"px",height:h+"px"}); // Set slider pos/size
		$("#playerSiz").css({ left:(w+8)+"px",height:h+"px",top:pt+"px"});		// Set sizer pos
		h+=pt;																	// Point at top of control bar
		var ct=h+$("#controlDiv").height()+14;									// Contents top
		var trh=sd.transHgt;													// Copy trans hgt
		if (!trh)	trh="100%";													// If not spec'd, use 100%
		if ((" "+trh).match("%")) 												// If % in transhgt
			trh=$(window).height()-ct-34;										// Get proper transhgt											
		$("#contentDiv").css({ top:ct+"px",height:trh+"px"});					// Position/size contents
		var cw=$("#contentDiv").width()-8;										// Get width of content panel
		if (sd.indexVectors)													// If an index
			cw+=16;																// Pad it out
		$("#controlDiv").css({ top:h+"px" });									// Position control slider
		var sw=164;																// Account for t/c & play but												
		if (sd.slideVectors)													// If slides
			sw+=$("#slideControlsDiv").width();									// Room for controls
		$("#slider").width(wid-sw);												// Slider width
		w=wid*r2;																// Transcript width
		$("#transDiv").css({ left:cw+"px",width:(w-cw-8)+"px",height:trh+"px",top:ct+"px"});
		$("#transSiz").css({ left:(w+8)+"px",height:trh+"px",top:ct+"px"});		// Pos transcript sizer
		w=wid*(1-sd.transInfoRatio)-8;											// Info window width
		if (w > wid-50) {														// All info
			w+=8;																// Remove border
			$("#contentDiv").css("display","none");								// Hide contents
			$("#transDiv").css("display","none");								// Hide transcript
			}
		$("#infoDiv").css({ left:(wid-w+8)+"px",width:Math.max(w,0)+"px",height:trh+"px",top:ct+"px"});
		$("#transHgt").css({ top:ct-0+(trh-0+4)+"px"});							// Set sizer top
		$("#transSearchDiv").css("left",$("#transDiv").width()-104)+"px";		// Search div width
		$("#infomap").css("opacity",0);											// Hide icon
			w=$("#infoDiv").width()
		$("#infoMapDiv").css({ left:w-62+"px",display:"initial"});				// Set pos and show
		if (sd.infoMapSource) 	 												// If an infomap
			$("#infomap").css("opacity",1);										// Show icon
		RunPlayer("resize");													// Resize player
		RunSlide("resize");														// Resize slides
		RunInfo("resize");														// Resize info
		if (sd.slideBackCol != undefined) 										// If a slide bg col spec'd
			$("#slideDiv").css("background-color",sd.slideBackCol);				// Set it
		}		

	function AnimatePanes(end, dur, which)									// ANIMATE CHANGE OF PANE RATIO
	{
		var start;
		if (which == slidePane) 	 	start=sd.playerSlideRatio;				// Get current player ratio
		else if (which == infoPane)  	start=sd.transInfoRatio;				// Get current transcript ratio
		var dif=Math.abs(end-start);											// Difference
		if ((dif < .05) || (paneAnimationTimer)) {								// If close enough or animating alredy
			clearInterval(paneAnimationTimer);									// Kill timer
			paneAnimationTimer=null;											// Clear timer var
			if (which == slidePane) 	 	sd.playerSlideRatio=end;			// Set player ratio
			else if (which == infoPane) 	sd.transInfoRatio=end;				// Set transcript ratio
			if (dif)															// If not there yet
				ResizePanes();													// Resize
			return;																// Quit
			}
		clearInterval(paneAnimationTimer);										// Kill timer
		paneAnimationTimer=null;												// Clear timer var
		var startTime=new Date().getTime();										// Set start
		if (dur == undefined)													// If no duration set
			dur=.5;																// Set default
		dur=dur*1000;															// Secs to ms
		if (playerMode != "play")												// If not playing
			dur=1;																// Go to end quickly
		paneAnimationTimer=setInterval(onAnimate,24);							// Set timer ~40ps

		function onAnimate() {
			var now=(new Date().getTime()-startTime)/dur;						// Get now
			now=1.0-((Math.cos(3.1414*Math.min(now,1))+1)/2.0);					// Full cosine curve
			var pos=start+(end-start)*now;										// Get val
			if (now > .99)	{													// If done
				clearInterval(paneAnimationTimer);								// Kill timer
				pos=end;														// Force to end
				paneAnimationTimer=null;										// Null it out
				}
			if (which == slidePane) 	 	sd.playerSlideRatio=pos;			// Set player ratio
			else if (which == infoPane) 	sd.transInfoRatio=pos;				// Set transcript ratio
			ResizePanes();														// Resize
			}
	}

	function ShowContent(pane, div, dontResize)								// SHOW IMAGE OR IFRAME
	{
		var i,o,oo={},extra="scrolling='no'";
		var n=showVectors[pane].length-1;										// Last vector
		$("#playerDiv").css("pointer-events","auto");							// Enable player events
		for (i=n;i>=0;i--) {													// For each vector
			o=showVectors[pane][i];												// Point at slide
			if (playerNow >= o.ps) {											// In this one
				if (o.n != undefined) {											// It times counter set
					if (o.n <= 0)												// No more more views left
						return;													// Quit
					o.n=Math.max(o.n-1,0);										// Decrement count
					}			
				if (showCurSource[pane] != o.cs) {								// A new item
					var src=o.cs;												// Point at source
					clearInterval(imageAnimationTimer[pane]);					// Kill image timer
					if (src.match(/\.png|.gif|\.jpg|\.jpeg|drive\.google/i)) {	// An image, or google drive image
						src=ConvertFromGoogleDrive(src);						// Get driect link if drive image
						if (src.match(/[^#]*/)[0] != showCurSource[pane].match(/[^#]*/)[0])  		// Bases are different
							$("#"+div).html("<img id='"+div+"IM' style='opacity:0' width='100%' src='"+src+"'>"); 	// Load an image
						else													// Same image base
							AnimateContent(div+"IM",o,pane);					// Animate image, if set
						$("#"+div+"IM").on("load",function() {					// On image loaded
							AnimateContent(this.id,o,pane);						// Animate image, if set
							})
						}
					else if ((pane == 0) && (src.match(/</) || src.match(/qtitle/i))) {	// Markup, graphics, or title over player pane
						ResizePanes();											// Force to proper size
						if (src.match(/qtitle/i))								// If a title
							src=RenderGraphics(src);							// Render it in SVG
						else													// HTML
							src=src.replace(/&quot;/g,"\"");					// Replace quotes
						$("#overlayDiv").html(src);								// Populate overlay
						}
					else{														// An iframe
						if (src.match(/assess=/i)) {							// If an assessment
							RunPlayer("pause");									// Pause player
							RunPlayer("pause");									// Pause player (twice for firefox mac)
							curAssess=(pane*100)+i;								// Get id to assessment
							src="assess.htm";									// Point at assess module
							if (o.r) { 											// If a ratio set
								if (pane == 3)									// Info pane							
									sd.transInfoRatio=o.r;						// Use it
								else											// Slide/player
									sd.playerSlideRatio=o.r;					// Use it
								}
							ResizePanes();										// Resize
							}
						if (src.match(/</))										// If markup
							$("#"+div).html(src.replace(/&quot;/g,"\""));		// Set it
						else if (src.match(/[^#]*/)[0] != showCurSource[pane].match(/[^#]*/)[0]) { // Bases are different
							$("#"+div+"IF").remove();							// Remove any existing iframes
							$("#"+div).html("<iframe id='"+div+"IF' frameborder='0' height='"+$("#"+div).height()+"' "+extra+" width='100%' style='opacity:0' src='"+src+"'></iframe>");	// Load in iframe
						if (src == "assess.htm") {							// If an assessment
								$("#"+div+"IF").css("background-color","#fff");	// Put up a background
								$("#playerDiv").css("pointer-events","none");	// Stop player events
								$("#"+div+"IF").css("pointer-events","auto");	// Restore assess events
								}
							}
						else													// Same image base
							AnimateContent(div+"IF",o,pane);					// Animate iframe, if set
						
						$("#"+div+"IF").on("load",function() {					// On iframe loaded
							if (o.h) {
								var win=document.getElementById(div+"IF").contentWindow;	// Point at iFrame	
								win.postMessage("ShivaAct="+o.h,"*");						// Send message to container
								}
							AnimateContent(this.id,o,pane);						// Animate image, if set
							})
						}
					if ((o.r != undefined) && (!dontResize))					// If changing ratios (not in a manual scrub)
						AnimatePanes(o.r,o.d,pane);								// Animate transition
					if (o.p) {													// If a player command
						var v=o.p.split(":");									// Split
						if (v[0])	v[0]=v[0].replace(/play/i,"jump");			// Turn play into jump
						RunPlayer(v[0],v[1]);  									// Send command to player
						}
					showCurSource[pane]=o.cs;									// Then is now
					if (pane == infoPane) {										// Info pane
						if (o.m)		$("#infoLab").html(o.m);				// Set new label
						else			$("#infoLab").html(sd.infoLab);			// Set def label
						}
					else if (pane == playerPane) {								// Player pane
						if (o.m)		$("#titleDiv").html(o.m);				// Set new label
						else			$("#titleDiv").html(sd.title);			// Set def label
						}
					else if (o.m != undefined)									// If a prompt
						Prompt(o.m);											// Show it
					if (o.h != undefined) {										// If a shivamessage
						var win=document.getElementById(div+"IF").contentWindow;// Point at iFrame	
						win.postMessage("ShivaAct="+o.h,"*");					// Send message to container
						}
					if (o.s != undefined) {										// If a style list
						var v=o.s.split("|");									// Get list of css commands
						for (j=0;j<v.length;++j) 								// For each one
							oo[v[j].split(":")[0]]=v[j].split(":")[1];			// Set
						$("#"+div).css(oo);										// Set css
						}
					oo=showVectors[pane][i+1];									// Point at next slide
					if (oo) {													// If not penulitimate image
						if (oo.cs.match(/\.png|.gif|\.jpg|\.jpeg/i))			// If an image				
							$("#cache"+pane).html("<img src='"+oo.cs+"'>"); 	// Load as image
						}
					}						
				break;															// Stop looking
				}																	
			}
	}

	function AnimateContent(id, vec, pane)									// ANIMATE IMAGE OR IFRAME
	{
		var x,y,z,dur=500;
		if (!vec.z)	{															// If not pan and zoom set
			$("#"+id).css("opacity",1);											// Make it visible	
			return;																// Quit
			}
		var v=vec.z.split("|");													// Get components
		var sx=v[4],sy=v[5],sz=v[6];											// Start positions
		var ex=v[0],ey=v[1],ez=v[2];											// End position
		if (v[3] != undefined)													// If duration set
			dur=v[3]*1000;														// Set it
		if (sx == undefined) {													// if start not defined
			sx=sy=.5;															// Center
 			sz=1;																// 100%		
			}
		var divs=["playerDiv","slideDiv","transDiv","infoDiv"];					// To get div from pane
		var pw=$("#"+id).width();												// Width of pane
		var ph=$("#"+id).height();												// Height of pane
		var dh=$("#"+divs[pane]).height();										// Container div height
		clearInterval(imageAnimationTimer[pane]);								// Kill timer
		var startTime=new Date().getTime();										// Set start
		if (playerMode != "play")												// If not playing
			dur=1;																// Go to end quickly
		imageAnimationTimer[pane]=setInterval(function() {						// Set timer
			var tx=0,ty=0;
			var now=(new Date().getTime()-startTime)/dur;						// Get now
			now=1.0-((Math.cos(3.1414*Math.min(now,1))+1)/2.0);					// Full cosine curve
			if (now > .999)	{													// If done
				clearInterval(imageAnimationTimer[pane]);						// Kill timer
				now=1;															// Force to end
				}
			x=(sx-0)+(ex-sx)*now;												// Get x pos
			y=(sy-0)+(ey-sy)*now;												// Get y
			z=(sz-0)+(ez-sz)*now;												// Get z
			if (z < 1) {														// If PIP
				x=x*pw-(pw*z/2);												// Pos x										
				y=y*ph-(ph*z/2);												// Pos Y										
				}
			else{
				x=-x*pw*z+(pw/2);												// Pos x
				y=(ph*z*-y)+(dh/2);												// Pos y
				}
			$("#"+id).css({	"-webkit-transform-origin":"0 0", 					// Move image
				"transform-origin":"0 0",			
				"-webkit-transform":"matrix("+z+",0,0,"+z+","+x+","+y+")",
	 			"-transform":"matrix("+z+",0,0,"+z+","+x+","+y+")",
	   			});
			$("#"+id).css("opacity",1);											// Make it visible	
			},24);																// Set timer ~40ps
	}
	
	function RenderGraphics(spec)											// RENDER GRAPHICS TO SCREEN
	{
		var alpha=100;
		var x="10",y=20*sd.playerAspect,e="start";
		var v=spec.split('|');													// Split into parts
		var titlePos=v[1];		var titleAlign=v[2];	var titleText=v[11];	// Pos
		var frameType=v[3];		var frameGrad=v[4];		var frameCol=v[5];		// Frame
		var fontFace=v[6];		var fontStyle=v[7];		var fontCol=v[8];		// Font
		var fontSize=v[9];		var fontShad=v[10];								// Font
		var str="<svg width='100%' height='100%' viewBox='0 0 100 "+sd.playerAspect*100+"'>\n";		// Header
		if (frameGrad) {														// Make gradient
			str+="<defs><linearGradient id='gr1' x1='0%' y1='0%' x2='0%' y2='100%'>"
			str+="<stop offset='0%' style='stop-color:"+frameGrad;
  			str+="'/><stop offset='100%' style='stop-color:"+frameCol;
     		str+="'/></linearGradient></defs>\n";
     		fc="url(#gr1)";
     		}
     	else
     		fc=frameCol;														// Solid color
		if (titleAlign == "Right")				x="90",e="end";					// Right
		else if (titleAlign == "Center")		x="50",e="middle";				// Center
		if (titlePos == "Middle")				y=55*sd.playerAspect;			// Middle
		else if (titlePos == "Lower third")		y=85*sd.playerAspect;			// Lower
		var sh=Math.max(Math.floor(fontSize/10),1);								// Shadow size

		if (frameType == "Bar") {	
			str+="<path style='fill:"+fc;										// Start of bar
			str+=";opacity:"+(alpha/100);										// Alpha
			str+="' d='M";														// Move							
			if (titleAlign == "Right")	{										// Right side
				str+="0,"+(y-fontSize/4);										// Pos 
				str+=" L94,"+(y-fontSize/4);									// Pos 
				str+=" L92,"+(y+sh);											// Pos 
				str+=" L0,"+(y+sh);												// Pos 
				}
			else if (titleAlign == "Center")	{								// Center
				str+="8,"+(y-fontSize/4);										// Pos 
				str+=" L94,"+(y-fontSize/4);									// Pos 
				str+=" L92,"+(y+sh);											// Pos 
				str+=" L6,"+(y+sh);												// Pos 
				}
			else if (titleAlign == "Left")	{									// Left
				str+="8,"+(y-fontSize/4);										// Pos 
				str+=" L100,"+(y-fontSize/4);									// Pos 
				str+=" L100,"+(y+sh);											// Pos 
				str+=" L6,"+(y+sh);												// Pos 
				}
			
			str+="Z'/>\n";														// End bar
			}
		str+="<text x='"+x+"' y='"+y+"' ";										// Text pos
		str+="style='opacity:"+(alpha/100);										// Alpha
		str+=";text-anchor:"+e+";fill:"+fontCol;								// Anchor / color
		str+=";font-family:"+fontFace.toLowerCase()+";font-size:"+Math.round(fontSize/4)+"px";	// Style							
		if (fontStyle.match(/bold/i))	str+=";font-weight:bold";				// Bold?
		if (fontStyle.match(/ital/i))	str+=";font-style:italic";				// Italic?
		if (fontShad)															// If a shadow
			str+=";text-shadow:"+sh+"px "+sh+"px "+sh*2+"px "+fontShad;			// Add it
		str+="'>"+titleText;													// String
		str+="</text>\n";														// End text
		return str+"</svg>";													// Return completed SVG
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TRANSCRIPT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function GetCharPosTimeFrom(t)											// GET CHARPOS IN TRANSCRIPT FROM TIME
	{
		var i,o,cp={};
		if (!sd.transText)														// No transcript
			return { pos:0,pos2:0,line:0 };										// Not found
		var n=showVectors[transPane].length-1;									// Last vector
		for (i=n;i>=0;i--) {													// For each vector
			o=showVectors[transPane][i];										// Point at vector
			if (t >= o.ps) {													// In this one
				if ((sd.transMode == "Closed-Caption") || (sd.transMode == "Chunked")) { // If in closd caption or chuncked mode
					cp.pos=o.cs;												// Point at start
					cp.pos2=showVectors[transPane][i+1].cs;						// End is start of next block
					}
				else if (sd.transMode == "None")  								// No highlighting
					cp.pos=cp.pos2=o.cs;										// Point at start
				else if (sd.transMode == "First") { 							// First letter
					cp.pos=o.cs;												// Point at start
					cp.pos2=o.cs+1;												// Add one								
					}
				else{															// Continuous mode
					cp.pos=(t-o.ps)/o.pd*o.cd+o.cs;								// Get interpolates char pos
					cp.pos2=cp.pos+o.d;											// End
					}
				cp.pct=cp.pos/sd.transText.length;								// Percentage
				return cp;														// Return pos
				}																// Ratio into				
			}
		return { pos:0,pos2:0,line:0 };											// Not found
	}
	
	function GetTimeFromCharPos(p)											// GET TIME FROM CHARPOS IN TRANSCRIPT
	{
		var i,o,t;
		var n=showVectors[transPane].length-1;									// Last vector
		for (i=n;i>=0;i--) {													// For each vector
			o=showVectors[transPane][i];										// Point at vector
			if (p >= o.cs) {													// In this one
				t=(p-o.cs)/o.cd*o.pd+o.ps;										// Get time
				return t;														// Return time
				}
			}
		return 0;																// Not found
	}
	
	function HighlightText(start, end)										// HGHLIGHT SELECTED CHARS
	{
		if (!sd.transText)														// No transcript
			return;																// Quit
		var src=sd.transText;													// Get source
		if (src.match(/\.pdf|drive\.google/i) && (src.length < 300)) {			// A pdf google drive file spec'd
			src=ConvertFromGoogleDrive(src);									// Get direct link if drive image
			if (sd.lastPdfPage != start)										// If not same
				$("#transcriptText").html("<iframe src='"+src+"#page="+start+"' width='100%' height='99%' frameborder='0'/>");	
			sd.lastPdfPage=start;												// Now is then
			return;																// Don't highlight
			}
		var tran=sd.transText;													// Copy original
		if (start != end) {														// If something to highlight
			var str=tran.substring(0,start);									// Pre highlight
			str+="<span class='qm-transHigh'";									// Add style
			if (end == undefined)	str+=" style='background-color:#ffaaaa'",end=start-0+1;	// Highlighting one char
			str+=">"+tran.substring(start,end);									// Highlight portion
			str+="</span>";														// End style
			str+=tran.substring(end);											// Add end
			tran=str;															// Copy
			}
		$("#transcriptText").html(tran.replace(/\n/g,"<br>"));					// Set text
		if (sd.transMode == "Closed-Caption") {									// If closed-caption
			if (!$("#closedCaptionDiv").length)									// If not there yet
				$("#overlayDiv").append("<div id='closedCaptionDiv' class='qm-ccaption'></div>");	// Add to overlay		
			if (sd.playerSlideRatio)											// If player visible		
				$("#closedCaptionDiv").text(sd.transText.substring(start,end));	// Show caption
			else																// Player hidden
				$("#closedCaptionDiv").text("");								// Clear caption
			var d=$("#overlayDiv").height()-$("#closedCaptionDiv").height();	// New top
			$("#closedCaptionDiv").css("top",d-32+"px");						// Reposition at bottom
			}
	}

	function MakeIndex(toc)													// MAKE INDEX
	{
		var i,j,hide=99;
		if (!toc) {																// No toc
			$("#contentDiv").css("display","none");								// Hide it
			$("#contentDiv").width(0);											// Squeeze
			return;																// Quit
			}
		$("#contentDiv").css("display","initial");								// Show it
		$("#contentDiv").width("auto");											// Auto size
		var str="<div style='cursor:pointer;padding-left:12px'>"				// Set up
		for (i=0;i<toc.length;++i) {											// For each title
			if (toc[i].l > hide)												// If this is hidden
				continue;														// Skip
			if (toc[i].e == "Closed") 											// If closed
				hide=(toc[i].l == undefined) ? 0 : toc[i].l;					// Set level
			else																// Open or unset
				hide=99;														// Don't hide
			str+="<div id='toc"+i+"' ";											// Add handler						
			str+="title='"+SecondsToTimecode(toc[i].t)+"'>";					// Add timecode tooltip
			for (j=0;j<toc[i].l;++j) 											// Tab in based on level					
				str+="&nbsp;&nbsp;&nbsp;"										// Add spaces
			if (toc[i].e == "Open")												// If open button
				str+="<img id='toe"+i+"' src='images/collapse.gif'>";			// Add button
			else if (toc[i].e == "Closed")										// If closed button
				str+="<img id='toe"+i+"' src='images/expand.gif'>";				// Add button
			else if (!(toc[i].l-0))												// Top level
				str+="<span style='color:#aaa'><b>&bull; </b></span>"; 			// Add bullet
			else 																// Sub-level
				str+="<span style='color:#aaa'><b>- </b></span>"; 				// Add d
			if (toc[i].s && (toc[i].s.match(/b/i)))	str+="<b>";					// If bold
			if (toc[i].s && (toc[i].s.match(/i/i)))	str+="<i>";					// If italic
			str+=toc[i].c.replace(/\[loop\]/i,"");								// Add title w/o [loop]
			if (toc[i].s && (toc[i].s.match(/i/i)))	str+="</i>";				// If italic
			if (toc[i].s && (toc[i].s.match(/b/i)))	str+="</b>";				// If bold
			if (toc[i].c && (toc[i].c.match(/\[loop\]/i))) 						// If looping
				str+=" - <a style='color:#009900' id='loop"+i+"'>Loop</a>";		// Add tag
			str+="</div>";														// End div
			}
		$("#contentsText").html(str+"</div>");									// Set div contents
		
		for (i=0;i<toc.length;++i) {											// For each index
			
			$("#toe"+i).on("click", function(e) {								// Add hander
				var id=this.id.substr(3)-0;										// Get id
				Sound("click");													// Click
				if (toc[id].e == "Open")										// If open
					toc[id].e="Closed";											// Close it
				else if (toc[id].e == "Closed")									// If closed
					toc[id].e="Open";											// Open it
				MakeIndex(toc);													// Redraw
				});
			
			$("#toc"+i).on("click", function(e) {								// Add hander
				loopStart=loopEnd=0;											// Not looping
				var id=this.id.substr(3)-0;										// Get id
				searchMode=false;												// Allow other events
				playerNow=sd.indexVectors[id].t-0;								// Set time
				if (sd.contentsPlayOnClick == "false")							// Otherwise seek when clicked
					RunPlayer("scrub",playerNow);								// Seek
				else
					RunPlayer("play");											// Play
				if ((" "+e.target.id).match(/loop/i)) {							// If loop clicked
					Sound("click");												// Click
					if ($("#"+e.target.id).text().match(/loop/i)) {				// Not looping
						if (playerMode != "play") 								// If not playing
							RunPlayer("play");									// Put into play
						$("#"+e.target.id).text("Stop");						// Set to stop
						$("#"+e.target.id).css("color","#990000");				// Red
						loopStart=sd.indexVectors[id].t-0;						// Loop start
						loopEnd=sd.indexVectors[id+1].t-0;						// Loop end
						}
					else{														// Looping
						$("#"+e.target.id).text("Loop");						// Set to start
						$("#"+e.target.id).css("color","#009900");				// Green
						loopStart=loopEnd=0;									// Not looping
						}
					}
			});

		}
			
	}

	function MakeTranscript()												// CREATE TRANSCRIPT
	{
		if (!sd.transText) {													// If no transcript
			$("#transcriptText").html("");										// No text
			$("#transDiv").css("display","none");								// Hide it
			$("#transSearchDiv").css("display","none");							// Hide it
			$("#transLab").css("display","none");								// Hide it
			if (!sd.indexVectors)												// No TOC
				sd.transInfoRatio=.0;											// Slide over
			return;																// Quit
			} 
		$("#transDiv").css("display","initial");								// Show it
		$("#transSearchDiv").css("display","initial");							// Show it
		$("#transLab").css("display","initial");								// Show it
		sd.transText=sd.transText.replace(/\r/g,"");							// Remove CRS
		$("#transcriptText").html(sd.transText);								// Fill div
		var words=sd.transText.split(" ");										// Get words
		var i,l,n=words.length;p=0;														
		for (i=0;i<n;++i) {														// For each word	
			l=words[i].length;													// Get word length
			words[i]={ label:words[i],pos:p };									// Make into label index object
			p+=l+1;																// Start of next word
			}
		var src=sd.transText;													// Get source
		if (src.match(/\.pdf|drive\.google/i) && (src.length < 300)) {			// A pdf google drive file spec'd
			src=ConvertFromGoogleDrive(src);									// Get direct link if drive image
			$("#transcriptText").html("<iframe src='"+src+"' width='100%' height='99%' frameborder='0'/>")	
			$("#transSearchDiv").css({ display:"none",cursor:"auto"});			// Hide search / gear
			}
		$("#transSearch").autocomplete({ source: words, 						// AUTOCOMPLETE HANDLER
			select: function(event, ui) {										// On select
				RunPlayer("scrub",GetTimeFromCharPos(ui.item.pos));				// Show
				}
			});
		
		$("#transcriptText").on("click", function (e) {							// HANDLE TRANSCRIPT CLICK
 			var now=new Date().getTime();										// Get time
 			if (now-lastClickTime < 1000)										// A spurious hit
 				return;															// Quit
	  		var s=window.getSelection();										// Get selection
 			var y=sd.transText.indexOf(s.focusNode.textContent);				// Char pos of paragraph
	 		y=y+s.anchorOffset;													// Position in text
			if (y > 1) {														// If a valid position
 				SendShivaMessage("ShivaAct=transclick",y);						// Send that position 
	 			RunPlayer("scrub",GetTimeFromCharPos(y),true);					// Go there
	 			RunPlayer("show");												// Show panes
				}
 			lastClickTime=now;													// Set time of last click
 			});

		$("#transHgt").hover(													// If over transcript height control
			function(){ $(this).css("background-color","#acc3db")},				// Highlight
			function(){ $(this).css("background-color","transparent")			// Hide
			});
		
		$("#transSiz").hover(													// Transcript width
			function(){ $(this).css("background-color","#acc3db")},				// Highlight
			function(){ $(this).css("background-color","transparent")			// Hide
			});

		$("#transSiz").draggable({												// DRAG TRANSCRIPT WIDTH HANDLER
			cursorAt:{left:0},													// Cursor offext
			cursor: "col-resize", axis:"x",										// X-only
			stop: function(event, ui) {											// When done
				$("#transSiz1").css({ width:"20px", left:"0px" });				// Contract hiding div
				SendShivaMessage("ShivaAct=transwid",sd.transInfoRatio);		// Send that position has changed
				ResizePanes();													// Resize panes when done
				},
			start: function(event, ui) {										// When starting
				$("#transSiz1").css({ width:"500px", left:"-250px" });			// Widen hiding div
				},
			drag: function(event, ui) {											// On drag
				var wid=Math.min($("body").width(),sd.width);					// Cap at screen size
				if ((" "+sd.width).match("%"))									// If % in width
					wid=$("body").width()*(sd.width.replace(/%/,"")/100);		// Get proper width											
			 	sd.transInfoRatio=Math.max(0,Math.min(1,(event.clientX)/wid));	// Set ratio between windows
				if (Math.abs(sd.transInfoRatio-.5) < .01) 						// If close to center
					sd.transInfoRatio=.5;										// Snap it there
				ResizePanes();													// Resize panes
				}
			});
		
		$("#transSettings").on("click", function(e) {							// TRANSCRIPT SETTINGS HANDLER
			if ($("#setpopup").length) {										// If open
				$("#setpopup").hide('slide',{direction:'right'},300, function(){ $("#setpopup").remove() });	// Hide, then remove it
				return;															// Quit
				}
			var w=190;
			var x=$("#transSearchDiv").css("left").replace(/px/,"")-0+80;
			var str="<table><tr height='18'><td>Language</td><td>";
			str+=MakeSelect("tLang",false,sd.transLangs.split("|"),sd.transLanguage,"style='font-size:10px'")+"</td></tr>";
			str+="</table>";
			$("body").append("<div id='setpopup' style='display:none;position:absolute;width:"+w+"px;height:auto;background-color:#f8f8f8;left:"+x+"px;top:"+y+"px;border:1px solid #ccc;padding:8px'>"+str+"</div>");
			var y=$("#controlDiv").css("top").replace(/px/,"")-0+24+$("#controlDiv").height();			
			$("#setpopup").css("top",y);										// Position above control bat
			$("#setpopup").show('slide',{direction:'right'},300);				// Show it

			$("#tLang").on("change", function(e) {								// LANGUAGE HANDLER
				sd.transLanguage=$("#tLang").val();								// Set param
				RunTranscript("language",sd.transLanguage);						// Do it
				});

			});																	// End transcript settings
	
		$("#annotate").on("click", function(e) {								// ANNOTATE HANDLER
			shivaLib=new SHIVA_Show("overlayDiv");								// Alloc SHIVA_Show
			var t=$("#contentDiv").css("top").replace(/px/,"")-0+40;			// In contents
			shivaLib.DrawOverlay();												// Make sure contexts are set up
			shivaLib.Annotate(18,t);											// Show it
			});


		$("#infomap").on("click", function(e) {									// INFOMAP HANDLER
			if ($("#infoMapIF").length) {										// If already there
				$("#infoMapIF").remove();										// Remove any existing iframes
				RunInfo("show");												// Restor old info contents
				$("#infoLab").html(sd.infoLab);									// Set proper label
				Prompt(sd.initialPrompt);										// Restore old prompt
				return;															// Quit
				}
			RunPlayer("pause");													// Pause player
			$("#infoLab").html("Content map");									// Set label
			sd.initialPrompt=$("#prompt").html();								// Save old prompt
			Prompt("<b>Drag map to view more. Click on labels to navigate through media and the dots open and close nodes.</b>");	// Show prompt
			$("#informationText").html("<iframe id='infoMapIF' scrolling='no' frameborder='0' height='"+$("#informationText").height()+"' width='100%' src='"+sd.infoMapSource+"'></iframe>");	// Load in iframe
			showCurSource[infoPane]=sd.infoMapSource;							// Set current source
			});
	}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EVENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    function onYouTubeIframeAPIReady() 										// YOUTUBE PLAYER READY
    {   
		RunPlayer("init");														// Init player								
 	}

	function SendShivaMessage(src, msg) 									// SEND SHIVA MESSAGE 
	{
		var str=src+"|show";													// Add src and window						
		if (msg)																// If more to it
			str+="|"+msg;														// Add it
		if (window.parent)														// If has a parent
			window.parent.postMessage(str,"*");									// Send message to parent wind
		else																	// Local	
			window.postMessage(str,"*");										// Send message to wind
	}

	function OnPlayerTimer()												// GET TIME FROM CHARPOS IN TRANSCRIPT
	{
		if ((!player) || (playerMode != "play"))								// Not playing
			return;																// Quit
		if (playerType == "youtube") 											// If YouTube
			playerCurTime=player.getCurrentTime();								// Get cur time
		else if (playerType == "html5") 										// If  HTML5
			playerCurTime=player.currentTime;									// Get cur time
		else if (playerType == "noplayer") 										// If  noplayer
			playerCurTime=(new Date().getTime()-player)/1000;					// Get current time			
		if (playerCurTime >= sd.playerStop)										// Past end
			RunPlayer("pause");													// Pause
		playerNow=Math.min(playerCurTime,sd.playerStop);						// Get capped time
		if (loopEnd && (playerNow >= loopEnd))	{								// If looping and past end of loop
			if (playerNow != loopLast) {										// If not still at last trigger point (Safari bug)
				loopLast=playerNow;												// Save last trigger point
				RunPlayer("play",playerNow=loopStart);							// Go there
				}
			}
		RunPlayer("show");														// Show status
		$("#slider ui-slider-handle").focus();									// Focus on slider
	}

	function RecordPlayTime()												// RECORD PLAY TIME
	{
		if ((sd.logIn != "true")|| (playerStarted == -1))						// If not saving answers
			return;																// Quit
		var dat={};
		var url=host+"saveuserdata.php";										// Base file
		dat["email"]=userName;													// Add email
		dat["password"]=password;												// Add password
		dat["show"]=curShow;													// Add shownum
		var dur=(playerNow-playerStarted).toFixed(2);							// Calc duration
		if (dur < .5)															// Not enough time
			return;																// Quit
		
		dat["event"]=new Date().toISOString()+"\tPlay\t"+playerStarted.toFixed(1)+"\t"+playerNow.toFixed(1)+"\t"+dur+"\n";	// Add event
		$.ajax({ url:url,dataType:'text',type:"POST",crossDomain:true,data:dat});  	// Post data
		playerStarted=-1;														// Disable play start
	}

	function shivaEventHandler(e)											// ON SHIVA EVENT
	{
		var str,i;
		if (e.origin.match(/vimeo/i)) {											// From vimeo
    		var ev=$.parseJSON(e.data);											// Parse json
  			if (ev.event == "playProgress") {									// If playing			
				playerCurTime=ev.data.seconds;									// Set current time
				}
			else if (ev.event == "play") {										// If play			
				$("#playBut").attr("src","images/pausebut.gif");				// Show pause but
				playerMode="play";												// Set mode
				playerStarted=playerNow;										// Save start point
 				}
			else if ((ev.event == "pause") || (ev.event == "finish")) {			// If pause/end			
  				$("#playBut").attr("src","images/playbut.gif");					// Show play but
				playerMode="pause";												// Set mode
    			RecordPlayTime();												// Record play time, if any
    			}
			else if (ev.method == "getDuration") {								// If duration	
   				playerTRT=ev.value;												// Get duration
 				}
 			else if (ev.method == "getVideoHeight") {							// If height	
 				playerHgt=ev.value;												// Set it
 				if (playerWid)													// If have both parts
 					sd.playerAspect=playerHgt/playerWid;						// Calc asp		
				}
			else if (ev.method == "getVideoWidth") {							// If width	
 				playerWid=ev.value;												// Set it
 				if (playerHgt)													// If have both parts
 					sd.playerAspect=playerHgt/playerWid;						// Calc asp		
				}
 			else if (ev.event == "ready"){										// If ready			
	 			var f=$("#vplayer");											// Point at iframe
				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"play\"}","*");
				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"pause\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"playProgress\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getVideoHeight\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getVideoWidth\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getDuration\"}","*");
 				RunPlayer("ready");												// Show status
				}
		}	
	
	 else if (e.data && e.data.match(/Shiva/)) {								// A SHIVA message
	 	if (e.data.match(/ShivaDraw=done/))										// If annotation palette closed
			$("#shivaDrawDiv").html("");										// Clear drawings
	 	else if ($("#infoMapIF").length && e.data.match(/click/)) {				// If infomap is open and clicked on
			var t=e.data.split("|")[3];											// Get time
			RunPlayer("scrub",t,true);											// Go there, but inhibit scale/info
			}
		}
	else if (e.data && e.data.match(/QmediaAssess/)) {							// An assessment message
		var v=e.data.split("|");												// Get data
		if (v[0] == "QmediaAssess=done") {										// Done with assessment
			searchMode=false;													// Allow other events
			var t=showVectors[Math.floor(curAssess/100)][curAssess%100].ps+.6;	// Roll player from where we left off
			if (v[2] && v[2].match(/goto=#/)) {									// If a valid goto to load show
				RunPlayer("pause");												// Pause
				var url="./loadshow.php?id="+v[2].substr(6);	// Get from db
				$.ajax({ url: url, dataType:'jsonp' });							// Get jsonp and call LoadShow() from it
				}
			if (v[2] && v[2].match(/goto=/) && !v[2].match(/goto=Def/i)) 		// If a valid goto spec's
				t=TimecodeToSeconds(v[2].substr(5))-0;							// Get time
			RunPlayer("scrub",t);												// Roll player	
			RunPlayer("play",t);												// Roll player	
			$("#overlayDivIF").remove();										// Remove iframe from player, if there
			}
		else if (v[0] == "QmediaAssess=ready") {								// Ready
			str=showVectors[Math.floor(curAssess/100)][curAssess%100].cs.split("=")[1];			// Extract name of assessment to run
			for (i=0;i<sd.assessments.length;++i)								// For each possible assessment
				if (sd.assessments[i].name == str) {							// The one I'm looking for
					var str="ShivaAct=data|"+JSON.stringify(sd.assessments[i]);	// Get data
					e.source.postMessage(str,"*");								// Send data to wind
					searchMode=true;											// Inhibit other events
					}
				}
		else if (v[0] == "QmediaAssess=answer") {								// An answer	
			var dat={};
			var url=host+"saveuserdata.php";									// Base file
			dat["email"]=userName;												// Add email
			dat["password"]=password;											// Add password
			dat["show"]=curShow;												// Add shownum
			if (v[3] == "personalNotes") {										// If notes
				playerNotes=false;												// Set flag
				VideoNotes();													// Save notes and kill dialog
				v[3]=notesText;													// Save notes to server
				}
			else if (v[3] == "draw") {											// If draw
				v[3]="Draw data goes here";										// Save drawing to server
				}
			dat["event"]=new Date().toISOString()+"\tAssess\t"+showVectors[Math.floor(curAssess/100)][curAssess%100].cs.split("=")[1]+"\t"+v[2]+"\t"+v[3]+"\n";		// Add event
			if (sd.logIn == "true")															// If saving answers
				$.ajax({ url:url,dataType:'text',type:"POST",crossDomain:true,data:dat});  	// Post data
			}
		else if (v[0] == "QmediaAssess=draw") { 								// Draw assessment
			if (v[2] == "start") {												// Start
				var l=18,t=90;
				if (v[3] == "bottom") {											// If in infodiv
					l=$("#playerDiv").width()/2-90;								// Center 
					sd.transInfoRatio=0;										// Full size
					ResizePanes();												// Resize
					sd.transInfoRatio=.5;										// Original size
					shivaLib=new SHIVA_Show("infoDiv");							// Alloc SHIVA_Show in infodiv
					$("#informationText").html("");								// Clear div
					$("#infoLab").html("Draw here:");							// Set label
					if (v[4] != undefined) 										// If a param
						if (v[4].match(/\/\//))									// If an image defined 
							$("#informationText").html("<img width='100%' src='"+v[4]+"'>"); // Load image
						else													// Must be css
							$("#informationText").css({"background-color":v[4],border:"1px solid #999"});	// Set style
					}				
				else{															// On top of player
					t=$("#contentDiv").css("top").replace(/px/,"")-0+40			// In content area
					shivaLib=new SHIVA_Show("overlayDiv");						// Alloc SHIVA_Show in player
					}
				shivaLib.DrawOverlay();											// Make sure contexts are set up
				shivaLib.Annotate(l,t);											// Show it
				}			
			else if (v[2] == "done") {											// Done
				shivaLib.dr.SetTool(-1);										// Close palette
				$("#shivaDrawDiv").html("");									// Clear drawings
				$("#informationText").html("");									// Clear div
				$("#informationText").css({"background-color":"#fff",border:"none"});	// Clear style
				$("#infoLab").html(sd.infoLab);									// Set label
				ResizePanes();													// Resize
				showCurSource[infoPane]="";										// Force redraw
				ShowContent(infoPane,"informationText");						// Show content
				}			
			}
		else if (v[0] == "QmediaAssess=notes") { 								// Notes assessment
			if (v[2] == "start") {												// Start
				notesText="";													// Clear previous notes
				playerNotes=true;												// Set flag
				VideoNotes();													// Open notes dialog
				}
			}
		else if (v[0] == "QmediaAssess=time") 									// Get time
			e.source.postMessage("ShivaAct=time|"+playerNow+"|"+keyFlag,"*");	// Send data to assessment iframe
		else if (v[0] == "QmediaAssess=play") 									// Play video
			RunPlayer("play",v[2]);												// Roll player	
		}
	else if (e.data && e.data.match(/Qmedia3D/)) {								// A WGL message
		var v=e.data.split("|");												// Get data
		if (v[0] == "Qmedia3D=ready") 											// Ready
			RunPlayer("ready");													// Set player
		if (v[0] == "Qmedia3D=time") {											// Time				
			if (v[2] != undefined)												// If valid
				playerCurTime=v[2]-0;											// Set current time
			}
		}
	else if (e.data.match(/PutJSON/)) 											// Incoming JSON data
		LoadShow($.parseJSON(e.data.substr(8)));								// Convert to obj and load
	else if (e.data && e.data.match(/Qmedia/)) {								// An message
		var v=e.data.split("|");												// Get data
		if (v[0] == "Qmedia=time") {											// Get time
			if (v[2] != playerNow)												// If not there already
				e.source.postMessage("ShivaAct=time|"+playerNow+"|"+keyFlag,"*"); // Send time
			}
		else if (v[0] == "Qmedia=seek") {										// Seek
			RunPlayer("scrub",v[2]);											// Cue player to time
			if (v[3] == "skipAssess")											// If skipping assess
				searchMode=false;												// Allow other events
			}
		else if (v[0] == "Qmedia=play") 										// Seek
			RunPlayer("play",v[2]);												// Play player to time
		else if (v[0] == "Qmedia=pause") 										// Pause
			RunPlayer("pause");													// Pause
		else if (v[0] == "Qmedia=data") {										// Data
			str=e.data.replace(/Qmedia=data\|QmediaEditor\|/,"");				// Strip off header
			LoadShow($.parseJSON(str));											// Convert to obj and load
			}
		else if (v[0] == "Qmedia=resize") {										// Resize
			if (v[2] == "top")													// If top
				sd.playerSlideRatio=v[3]-0;										// Set it								
			if (v[2] == "bot")													// If bot
				sd.transInfoRatio=v[3]-0;										// Set it	
			ResizePanes();														// Resize								
			}
		else if (v[0] == "Qmedia=annotate") {									// Annotate
			if (!shivaLib)														// If not already there
				shivaLib=new SHIVA_Show("overlayDiv");							// Alloc SHIVA_Show
			var t=$("#contentDiv").css("top").replace(/px/,"")-0+40;			// In contents
			shivaLib.DrawOverlay();												// Make sure contexts are set up
			shivaLib.Annotate(18,t);											// Show it
			}
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ACTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	function RunPlayer(what, param, param2)									// PLAYER ACTIONS
	{
		var i,str;
		if ((what == "play") || (what == "jump")) {								// Play/jump
			if (sd.noPlay)														// If no playing
				return;															// Quit
			if ((playerMode == "empty") && isMobile)							// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			if ($("#playBut").attr("src") == "images/playbut.gif")	{			// If in pause
				$("#playBut").attr("src","images/pausebut.gif");				// Show pause but
				playerMode="play";												// Set mode
 				}
			else if (param == undefined) {										// Already in play, but not going to a time
				$("#playBut").attr("src","images/playbut.gif");					// Show play but
				playerMode="pause";												// Set mode
				}
			if (param != undefined) {											// If playing to a time
				if ((""+param).match(/:/))										// In tc format
					param=TimecodeToSeconds(param);								// Convert to secs
				playerCurTime=playerNow=Math.max(Math.min(param,sd.playerStop),0);	// Set cur time
				}	
			if (!player) {														// If no player yet
				RunPlayer("show");												// Show where we're at
				return;															// Quit
				}
			if (playerType == "youtube") {										// If YouTube
				player.seekTo(playerNow,true);									// Cue
				if (playerMode == "play")		player.playVideo();				// Play
				else if (playerMode == "pause")	player.pauseVideo();			// Pause
				}
			else if (playerType == "vimeo") {									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+playerNow+"\"}","*");
				if (playerMode == "play")										// Play
					player.contentWindow.postMessage("{\"method\":\"play\"}","*");	// Send
				if (playerMode == "pause")										// Pause
					player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 				}
			else if (playerType == "html5") {									// If HTML5
				if (player.readyState)											// If ready
					player.currentTime=playerNow;								// Cue
				if (playerMode == "play")  	player.play(); 						// Play
				if (playerMode == "pause")	player.pause();						// Pause
				}
			else if (playerType == "noplayer")									// If noplayer
				player=new Date().getTime()-(playerNow*1000);					// Get current time			
			if (playerType == "wgl") {											// If WGL
				if (playerMode == "play")										// If in play
					player.contentWindow.postMessage("ShivaAct=play|"+playerNow,"*");	 // Send message to wgl pane
				else if (playerMode == "pause")									// If pause
					player.contentWindow.postMessage("ShivaAct=pause","*");	 	// Send message to wgl pane
				}
			if (what == "play")													// Only in play
				RunPlayer("show");												// Show where we're at
			if (playerMode == "play")	playerStarted=playerNow;				// Save start point
			if (playerMode == "pause")	RecordPlayTime();						// Record player action
			
			}
		else if ((what == "scrub") || (what == "seek"))  {						// Scrub
			clearInterval(paneAnimationTimer);									// Kill pane timer
			clearInterval(imageAnimationTimer[playerPane]);						// Kill image timer
			clearInterval(imageAnimationTimer[slidePane]);						// Kill image timer
			clearInterval(imageAnimationTimer[infoPane]);						// Kill image timer
			if ((playerMode == "empty") && isMobile)							// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			playerCurTime=playerNow=Math.max(Math.min(param,sd.playerStop),0)	// Set now
			if (!player) {														// If no player yet
				RunPlayer("show",param2);										// Show
				return;															// Quit
				}
			if (playerType == "youtube") 										// If YouTube
				player.seekTo(playerNow,true);									// Cue
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+playerNow+"\"}","*");
			else if (playerType == "html5") {									// If HTML5
				if (player.readyState)											// If ready
					player.currentTime=playerNow;								// Cue
				}
			else if (playerType == "wgl") 										// If WGL
				player.contentWindow.postMessage("ShivaAct=seek|"+playerNow,"*"); // Send message to wgl pane
			else if (playerType == "noplayer")									// If noplayer
				player=new Date().getTime()-(playerNow*1000);					// Get current time			
			if (what == "scrub")												// Only in scrub
				RunPlayer("show",param2);										// Show where we're at
			}
		else if (what == "pause") {												// Pause
			$("#playBut").attr("src","images/playbut.gif");						// Show pause but
			playerMode="pause";													// Set mode
			if (!player)	return;												// If no player yet, quit
			if (playerType == "youtube") 										// If YouTube
				player.pauseVideo();											// Pause
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 			else if (playerType == "html5") 									// If HTML5
				player.pause(); 												// Pause
			else if (playerType == "wgl") 										// If WGL
				player.contentWindow.postMessage("ShivaAct=pause","*");			// Send message to wgl pane
			RecordPlayTime();													// Record player action, if any
			}
		else if (what == "show") {												// Scrub
			var str=SecondsToTimecode(playerNow)+" / ";							// Cur time
			str+=SecondsToTimecode(sd.playerStop);								// End time
			$("#timeDisp").text(str);											// Show now
			$("#slider").slider("value",playerNow);								// Set slider
			if (searchMode)														// If just searching																			
				return;															// Quit
			var max=1;
			if ($("#transcriptText")[0])										// If a text field
				max=$("#transcriptText")[0].scrollHeight;						// Max
			var cp=GetCharPosTimeFrom(playerNow);								// Get char pos in transcript
			$("#transcriptText").scrollTop(cp.pct*max-$("#transcriptText").height()/4);	// Set scroll
			if (!param)															// If not inhibiting scroll
				RunInfo("show");												// Show Info
			ShowContent(playerPane,"overlayDiv", param);						// Show content
			RunSlide("show",param);												// Show slide, with param to/not resize
			HighlightText(cp.pos,cp.pos2);										// Highlight area
			}
		else if (what == "quality") {											// Quality
		if (!player)	return;													// If no player yet, quit
			if (playerType == "youtube") {										// If YouTube
				var o={ Default:"default", Good:"small", Better:"medium", Best:"large"};	// Choices
				player.setPlaybackQuality(o[sd.playerQuality]);					// Set quality
				}
			}
		else if (what == "volume") {											// Volume
			if (!player)	return;												// If no player yet, quit
			if (playerType == "youtube") 										// If YouTube
				player.setVolume(sd.playerVolume);								// Set it
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"setVolume\",\"value\":\""+sd.playerVolume/100+"\"}","*"); // Send
			else if (playerType == "html5") 									// If HTML5
				player.volume=sd.playerVolume/100;								// Set
			}
		else if (what == "speed") {												// Speed
			if (!player)	return;												// If no player yet, quit
			s=Math.max(.25,sd.playerSpeed/50);									// Speed set .25 to 2
			if (playerType == "youtube") 										// If initted YouTube
				player.setPlaybackRate(s);										// Set speed
			else if (playerType == "html5") 									// If HTML5
				player.playbackRate=s;											// Set speed
			}
		else if (what == "resize") {											// Resize
			if (!player)	return;												// If no player yet, quit
			var w=$("#playerDiv").width();										// Get width
			if (player && (playerType == "youtube")) 							// If initted YouTube
				player.setSize(w,w*sd.playerAspect);							// Resize
			else if ((playerType == "vimeo") || (playerType == "html5")) {		// If Vimeo or HTML5
				$("#vplayer").width(w);											// Set width
				$("#vplayer").height(w*sd.playerAspect);						// Set height
				}
			else if (playerType == "wgl")  {									// If WGL
				$("#vplayer").width(w);											// Set width
				$("#vplayer").height(w*sd.playerAspect);						// Set height
				}
			}
		else if (what == "load") {												// Load a new show
			RunPlayer("pause");													// Pause
			RunPlayer("scrub",0);												// Got0 to 0
			var url="./loadshow.php?id="+param;				// Get from db
			$.ajax({ url: url, dataType:'jsonp' });								// Get jsonp and call LoadShow() from it
			}
		else if (what == "ready") {												// When ready
			if (sd.playerAuto == "true")										// If autoplay
				RunPlayer("play",sd.playerStart);								// Play
			else if (sd.playerStart) {											// Normal pause start
				RunPlayer("scrub",sd.playerStart);								// Seek
				RunPlayer("pause");												// Pause
				}
			ResizePanes();														// Resize panes
			$("#splashDiv").animate({ opacity:0},400);							// Hide logo
			$("#showDiv").animate({ opacity:1},1500, function() {				// Shoe interface
					$("#transcriptText").css("opacity",1);						// Force visible in Safari 
					$("#informationText").css("opacity",1);						// Force visible in Safari 
					$("#contentsText").css("opacity",1);						// Force visible in Safari 
					$("#splashDiv").hide();										// Hide splash
					ResizePanes();												// Resize panes
					RunPlayer("show");											// Show
					});				
			}
		else if (what == "init") {												// Init player
			if (playerType == "youtube") {										// If YouTube
				$("#playerDiv").html("<div id='vplayer'></div>");				// Add holder div
	       		var pc=sd.playerControls == "true" ? 1 : 0;						// Set player controls?
	       		player=new YT.Player("vplayer", {								// Init player
					playerVars:{ modestbranding:1, controls:pc, 				// Settings	
						disablekb:1, rel:0, showinfo:0, html5:1, autoplay:1 },
	          		videoId: sd.playerSource,									// Set source
	         	 	events:{													// Add event handlers
	            		"onStateChange": function(s) {							// Change of state
		         			if (s.data == 1) {									// In play
								$("#playBut").attr("src","images/pausebut.gif");// Show pause but
       							if (playerMode == "empty" && !isMobile) 		// If first time
       								player.pauseVideo();						// Pause
								playerMode="play";								// Set mode
       							playerStarted=playerNow;						// Save start point

       							}
       						else if ((s.data == 2) || (s.data == 0)) {			// In pause
  								$("#playBut").attr("src","images/playbut.gif");	// Show play but
								playerMode="pause";								// Set mode
       							RecordPlayTime();								// Record play if any
       							}
       						},
	            		"onReady": function(s) { RunPlayer("ready") }			// When ready
		 	   			}});
					}
			else if (playerType == "vimeo") {									// If Vimeo
				str="<iframe id='vplayer' src='//player.vimeo.com/video/";		// Iframe start
				str+=sd.playerSource;											// Add source
				str+="?api=1&player_id=vplayer' width='100' height='281' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>";
				$("#playerDiv").html(str);										// Add vimeo iframe
		       	player=$("#vplayer")[0];										// Point to iframe
				}
			else if (playerType == "wgl") {										// If WGL
				str="<iframe style='width:100%' id='vplayer' src='wgl.htm?m="	// Iframe start
				str+=sd.playerSource+"' frameborder='0'></iframe>";				// Finish iframe
				$("#playerDiv").html(str);										// Add WGL iframe
		       	player=$("#vplayer")[0];										// Point to iframe
				}
			else if (playerType == "html5") {									// If HTML5
 				$("#playerDiv").html("");										// Add video tag
				var base=sd.playerSource.match(/(.*)\.[^.]+$/i)[1];				// Extract base
				str="<video id='vplayer' width='100%' height='100%'";			// Video tag
				if ((sd.playerControls == "true") || isMobile)					// If has controls or mobile
					str+= " controls";											// Add native controls to player
				str+=">";														// Close tag
				if (sd.playerSource.match(/\.mp3/i)) {							// If audio
					str+="<source src='"+base+".mp3'  type='audio/mp3'>";		// MP3 Source
					}
				else{															// VIDEO
					str+="<source src='"+base+".mp4'  type='video/mp4'>";		// MP4 Source
					str+="<source src='"+base+".ogg'  type='video/ogg'>";		// OGG Source
					str+="<source src='"+base+".webm' type='video/webm'>";		// WEBM Source
					}
				str+="</video>"
				$("#playerDiv").html(str);										// Add video tag
  				var myVid=document.getElementById("vplayer");					// Point ar player	
 				
 				myVid.onloadstart=function() {									// When loaded
 					player=$("#vplayer")[0];									// Point to player
 					RunPlayer("ready");											// Set up player		
					};
								
				myVid.oncanplay=function() {									// When ready
      				if (player.videoHeight && player.videoWidth) 				// A video file
   	    				sd.playerAspect=player.videoHeight/player.videoWidth;	// Set aspect 				
 					RunPlayer("ready");											// Set up player		
					};

 				myVid.onended= function() {										// When done
  					RunPlayer("pause");											// Pause
 					};

				myVid.onplay= function() {										// When playing
					$("#playBut").attr("src","images/pausebut.gif");			// Show pause but
 						playerMode="play";										// Set mode
					playerStarted=playerNow;									// Save start point
					};

				myVid.onpause= function() {										// When paused
					$("#playBut").attr("src","images/playbut.gif");				// Show play but
 						playerMode="pause";										// Set mode
  					RecordPlayTime();											// Record play time, if any
  					};
  		 		
 			  	myVid.addEventListener("loadstart",myVid.onloadstart);	 		// Add listener for safari
 		 		myVid.addEventListener("canplay",myVid.oncanplay);	 			// Add listener for safari
			  	myVid.addEventListener("ended",myVid.onended);	 				// Add listener for safari
 			  	myVid.addEventListener("play",myVid.onplay);	 				// Add listener for safari
 			  	myVid.addEventListener("pause",myVid.onpause);	 				// Add listener for safari
 	    		}
			}																	// End init
 	}																			// End closure

	function RunSlide(what, dontResize )									// SLIDE ACTIONS
	{
		var i,str;
		if (what == "show") 													// Show
			ShowContent(slidePane,"slideDiv", dontResize);						// Show content
		else if (what == "last") { 												// Go to previous slide
			searchMode=false;													// Cancel search mode
			var n=showVectors[slidePane].length-1;								// Last vector
			for (i=n;i>0;i--) 													// For each vector
				if (playerNow >= showVectors[slidePane][i].ps) {				// In this one
					RunPlayer("scrub",showVectors[slidePane][i-1].ps);			// Go there
					break;														// Quit looking
					}
			}
		else if (what == "next") { 												// Go to next slide
			searchMode=false;													// Cancel search mode
			var n=showVectors[slidePane].length-1;								// Last vector
			for (i=n-1;i>=0;i--) 												// For each vector
				if (playerNow >= showVectors[slidePane][i].ps) {				// In this one
					RunPlayer("scrub",showVectors[slidePane][i+1].ps);			// Go there
					break;														// Quit looking
					}
			}
		else if (what == "resize") 												// Resize
			$("#slideDivIF").height($("#slideDiv").height()-2);					// Set iframe height, if any
		}																		// End closure

	function RunInfo(what, param)											// INFO ACTIONS
	{
		if ((what == "show") && (!$("#infoMapIF").length)) 						// Show and not in infomap mode
			ShowContent(infoPane,"informationText");							// Show content
		else if (what == "resize") 												// Resize
			$("#infoDivIF").height($("#informationText").height()-2);			// Set iframe height, if any
	}																			// End closure

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function Sound(sound, mode)												// PLAY SOUND
	{	
		var snd=new Audio();
		if (!snd.canPlayType("audio/mpeg"))
			snd=new Audio(sound+".ogg");
		else	
			snd=new Audio(sound+".mp3");
		if (mode != "init")
			snd.play();
	}
	
	function Popup(msg)
	{
		var x=$("#playerDiv").width()/2-50;
		var y=$("#playerDiv").css("top").replace(/px/,"")-30+$("#playerDiv").height()/2;
		$("#popup").remove();
		var str="<div id='popup' style='position:absolute;display:none;background-color:#eee;left:"+x+"px;top:"+y+"px;border:1px solid;padding:12px' class='qm-rounded-corners'>"+msg+"</div>";
		$("body").append(str);
		$("#popup").show().delay(700).hide(300)
		}

	function MakeVectors(pane, rlc)											// CREATE TIMIMG VECTOR ARRAY
	{
		var i,o,d="",last="xxx";
		if (!rlc)																// No run length data
			return;																// Quit		
		showVectors[pane]=[];													// Alloc new array														
		rlc.push({t:sd.PlayerStop,c:"" });										// Cap last one at show end
		for (i=0;i<rlc.length-1;++i) {											// For each run length
			o={};																// New obj
			o.ps=rlc[i].t;														// Time start
			o.cs=rlc[i].c;														// Content start
			if (o.cs && (o.cs == last) && isNaN(o.cs))							// If same as last one
				o.cs+="#"+i;													// Make it unique
			if (rlc[i].d)														// If a width set
				d=rlc[i].d;														// Use it
			if (d)																// If something there							
				o.d=d;															// Set 3rd param
			o.pd=rlc[i+1].t-rlc[i].t;											// Set time duration
			if (!isNaN(o.cs))													// If numeric content
				o.cd=rlc[i+1].c-rlc[i].c;										// Set content duration
			if (rlc[i].r != undefined)			o.r=rlc[i].r;					// Add ratio if set
			if (rlc[i].s != undefined)			o.s=rlc[i].s;					// Add style if set
			if (rlc[i].h != undefined)			o.h=rlc[i].h;					// Add hrml5 msg if set
			if (rlc[i].p != undefined)			o.p=rlc[i].p;					// Add player command if set
			if (rlc[i].m != undefined)			o.m=rlc[i].m;					// Add prompt if set
			if (rlc[i].z != undefined)			o.z=rlc[i].z;					// Add pan/zoom if set
			if (rlc[i].n != undefined)			o.n=rlc[i].n;					// Add times if set
			showVectors[pane].push(o);											// Add to vector list
			last=o.cs;															// Remember last

			}
	}

	function MakeSelect(id, multi, items, sel, extra, values)				// CREATE HTML SELECT
	{
		var	str="<select id='"+id+"'";											// Header
		if (multi)																// Multi select
			str+="multiple='multiple' size='"+multi+"'";						// Add flag
		if (extra)																// If extra param
			str+=extra;															// Add them
		str+=">";																// End header
		for (i=0;i<items.length;++i) {											// For each option
			str+="<option";														// Add tag
			if (sel == items[i])												// If selected
				str+=" selected='selected'"										// Add tag
			if (values && values[i])											// If has a value
				str+=" value='"+values[i]+"'";									// Add it
			str+=">"+items[i]+"</option>";										// End option
			}	
		return str+"</select>";													// End select				
	}

	function TimecodeToSeconds(timecode) 									// CONVERT TIMECODE TO SECONDS
	{
		var h=0,m=0;
		var v=(""+timecode).split(":");											// Split by colons
		var s=v[0]																// Add them
	 	if (v.length == 2)														// Just minutes, seconds
			s=v[1],m=v[0];														// Add them
		else if (v.length == 3)													// Hours, minutes, seconds
			s=v[2],m=v[1],h=v[0];												// Add them
		return(Number(h*3600)+Number(m*60)+Number(s));							// Convert
	}
	
	function SecondsToTimecode(secs) 										// CONVERT SECONDS TO TIMECODE
	{
		var str="",n;
		n=Math.floor(secs/3600);												// Get hours
		if (n) str+=n+":";														// Add to tc
		n=Math.floor(secs/60);													// Get mins
		if (n < 10) str+="0";													// Add leading 0
		str+=n+":";																// Add to tc
		n=Math.floor(secs%60);													// Get secs
		if (n < 10) str+="0";													// Add leading 0
		str+=n;																	// Add to tc
		return str;																// Return timecode			
	}	

	function Prompt(msg) 													// SET PROMPT
	{
		$("#prompt").animate({ opacity:0},200, function() {						// Hide
					$("#prompt").html(msg);										// Set text
					$("#prompt").animate({ opacity:1},1000); 					// Reshow
					});
	}

	function Login(callback)												// LOG IN
	{
		Sound("click");															// Click sound
		$("#alertBoxDiv").remove();												// Remove any old ones
		$("body").append("<div class='qm-unselectable' id='alertBoxDiv'></div>");														
		var str="<p><img src='images/qlogo32.png' style='vertical-align:-10px'/>&nbsp;&nbsp;";								
		str+="<span style='font-size:18px;text-shadow:1px 1px #ccc;color:#990000'><b>Login</b></span><p>";
		str+="<div style='font-size:14px;margin:14px'>Please type your username or email, and password:<br></div>";
		str+="<table style='font-size:14px;margin:14px'>";
		str+="<tr><td>User name </td><td><input class='qm-is' type='text' id='gtBoxUn'></td></tr>";
		str+="<tr><td>Password</td><td><input class='qm-is' type='password' id='gtBoxPw'></td></tr></table>";
		$("#alertBoxDiv").append(str);	
		$("#alertBoxDiv").dialog({ width:400, modal:true, buttons: {
		            	"Cancel": function() { 	$(this).remove(); sd.logIn == "false"; userName="";},
		            	"OK": function() { 
								var dat={};
		            			userName=$("#gtBoxUn").val(); 					// Get username
		            			password=$("#gtBoxPw").val(); 					// Get password
								if (password)									// If a password
									password=password.replace(/#/g,"@");		// #'s are a no-no, replace with @'s	
								var url=host+"saveuserdata.php";				// Base file
								dat["email"]=userName;							// Add email
								dat["password"]=password;						// Add password
								dat["show"]=curShow;							// Add shownum
								dat["event"]=new Date().toISOString()+"\tLogged in\n";	// Add event
								$.ajax({ url:url,dataType:'text',type:"POST",crossDomain:true,data:dat,  	// Post data
									success:function(d) { 						// On success		
									 	if (d.match(/pass/i)) 					// Passwords dont match
											AlertBox("Password","Sorry, that\'s not the password we have for you",Login);
									 	else if (d.match(/data/i)) 					// Passwords don't match
											AlertBox("Need username","We need your username or email",Login);
										else {									// Existing user
				            				if (callback) callback();			// Run callback if set
											else								// Show message
												AlertBox("Welcome to Qmedia!","You are logged in as <b><i>"+userName+"</b></i>");
				            				}
										},
									error:function(xhr,status,error) {	AlertBox("Login error!",error); },	// Show error
									});		
		            			$(this).remove(); 								// Kill dialog
		            			}
						}});	
		$(".ui-dialog-titlebar").hide();
		$(".ui-dialog-buttonpane.ui-widget-content.ui-helper-clearfix").css("border","none");
		$(".ui-dialog").css({"border-radius":"14px", "box-shadow":"4px 4px 8px #ccc"});
 		$(".ui-button").css({"border-radius":"30px","outline":"none"});
 	}
	
	function AlertBox(title, content, callback)								// ALERT BOX
	{
		$("#alertBoxDiv").remove();												// Remove any old ones
		$("body").append("<div class='qm-unselectable' id='alertBoxDiv'></div>");														
		var str="<p><img src='images/qlogo32.png' style='vertical-align:-10px'/>&nbsp;&nbsp;";								
		str+="<span style='font-size:18px;text-shadow:1px 1px #ccc;color:#990000'><b>"+title+"</b></span></p>";
		str+="<div style='font-size:14px;margin:16px'>"+content+"</div>";
		$("#alertBoxDiv").append(str);	
		$("#alertBoxDiv").dialog({ width:400, buttons:{"OK": function() { $(this).remove(); if (callback) callback(); }}});	
		$(".ui-dialog-titlebar").hide();
		$(".ui-dialog-buttonpane.ui-widget-content.ui-helper-clearfix").css("border","none");
		$(".ui-dialog").css({"border-radius":"14px", "box-shadow":"4px 4px 8px #ccc"});
  		$(".ui-button").css({"border-radius":"30px","outline":"none"});
	}

	function GetTextBox(title, content, def, callback)					// GET TEXT LINE BOX
	{
		Sound("click");														// Ding sound
		$("#alertBoxDiv").remove();											// Remove any old ones
		$("body").append("<div class='qm-unselectable' id='alertBoxDiv'></div>");														
		var str="<p><img src='images/qlogo32.png' style='vertical-align:-10px'/>&nbsp;&nbsp;";								
		str+="<span id='gtBoxTi'style='font-size:18px;text-shadow:1px 1px #ccc;color:#990000'><b>"+title+"</b></span><p>";
		str+="<div style='font-size:14px;margin:14px'>"+content;
		str+="<p><input class='qm-is' type='text' id='gtBoxTt' value='"+def+"'></p></div>";
		$("#alertBoxDiv").append(str);	
		$("#alertBoxDiv").dialog({ width:400, buttons: {
					            	"OK": 		function() { callback($("#gtBoxTt").val()); $(this).remove(); },
					            	"Cancel":  	function() { $(this).remove(); }
									}});	
		$(".ui-dialog-titlebar").hide();
		$(".ui-dialog-buttonpane.ui-widget-content.ui-helper-clearfix").css("border","none");
		$(".ui-dialog").css({"border-radius":"14px", "box-shadow":"4px 4px 8px #ccc"});
 		$(".ui-button").css({"border-radius":"30px","outline":"none"});
 	}

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NOTES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	function VideoNotes(noReset) 												//	ADD NOTES TO VIDEO
	{
		var i,str,v;
		if ($("#notesDiv").length) {											// If some notes there already
			if (!noReset)														// If not starting from scratch
				notesText="";													// Clear
			for (i=0;i<$("#notesTbl tr").length;++i) 							// For each row
				if ($("#ntx-"+i).val())											// If something there
					notesText+=$("#ntc-"+i).text()+$("#ntx-"+i).val()+"|"; 		// Add row
			}
		$("#notesDiv").remove();												// Clear it
		if (!playerNotes) 														// If not visible
			return;																// Turn it off
		var ts="color:#009900;cursor:pointer";									// Timecode style
		var ns="font-size:13px;border:none;background:none;width:100%;padding:0px;margin:0px"; // Note style	
		var wid=sd.width;														// Copy width
		if ((" "+sd.width).match("%"))											// If % in width
			wid=$("body").width()*(sd.width.replace(/%/,"")/100);				// Get proper width											
		str="<div class='qm-rounded-corners' id='notesDiv' style='position:absolute;padding:8px;overflow-y:auto;overflow-x:hidden;";	// Div
		var h=Math.max(400,$("#infoDiv").height());								// Set height by info or at least 300	
		h=Math.max(h,$("#transDiv").height());									// Set height by trans if bigger	
		h=Math.min(h,400);														// Cap at 400
		str+="width:"+wid/2+"px;height:"+(h-16)+"px;";							// Set sizing
		str+="background-color:#f8f8f8;border:1px solid #ccc;box-shadow:4px 4px 8px #ccc;";	// Set coloring
		str+="top:"+$("#infoDiv").offset().top+"px;left:"+wid/4+"px;'>";		// Set position
		str+="<table id='notesTbl' width='100%'>";								// Table
		str+="<div style='text-align:center;font-size:16px;'>Personal notes</div><hr>";
		str+="<div style='position:absolute;top:-2px;left:0px;width:100%;text-align:right;color:#999'><br/>Find: <input type='input' id='notesSearch' style='height:12px;width:60px;font-size:10px;padding:0px;margin:0px;border:1px solid #ccc'/>"
		str+=" <img src='images/closedot.gif' id='nCloser' title='Close notes' style='vertical-align:bottom'>&nbsp; &nbsp;</div>";
		str+="<tr><td width='38' id='ntc-0' style='"+ts+"'>Type:</td><td><input id='ntx-0' type='input' style='"+ns+"'/></td></tr>";
		str+="</table>";														// End
		if (1) {																// If notes enabled
			str+="<div style='text-align:right;color:#666'><br>Pause video while typing?<input type='checkbox' id='notesPause' style='height:11px'>";
			if (sd.logIn != "true")												// If not in assessment mode
				str+="<br/>Save notes: <img src='images/savedot.gif' id='notesSave' title='Save notes' width='15' style='vertical-align:bottom'>&nbsp;";
			str+="<br/>Load notes: <img src='images/loaddot.gif' id='notesLoad' title='Load notes' width='15' style='vertical-align:bottom'>&nbsp;";
			}
		$('body').append(str+"</div>");											// Add to dom								
	
		if (notesText) {														// If notes
			v=notesText.split("|");												// Divide into lines
			for (i=0;i<v.length;++i) {											// For each line
				if (!v[i])	continue;											// Ignore blanks
				str="<tr><td id='ntc-"+i+"' style='"+ts+"'>Type:</td><td><input id='ntx-"+i+"' type='input' style='"+ns+"'/></td></tr>";
				if (i)															// 1st row is already there
					$("#notesTbl").append(str);									// Add row
				$("#ntc-"+i).text(v[i].substring(0,5));							// Set timecode	
				$("#ntx-"+i).val(v[i].substr(5));								// Set text	
	
				$("#ntc-"+i).click(function(e){									// Add click handler
					   	var time=$("#"+e.target.id).text();						// Get time
						if (e.shiftKey)											// If shift key pressed
							$("#"+e.target.id).text(SecondsToTimecode(playerNow));	// Set new time
						else
							RunPlayer("scrub",TimecodeToSeconds(time));			// Cue player
						});
				$("#ntc-"+i).dblclick(function(e){								// Add d-click handler
					   	var time=$("#"+e.target.id).text();						// Get time
						RunPlayer("play",time);									// Play
						});
				}
			}
		
		$("#notesDiv").draggable();												// Make draggable
		$("#ntx-0").focus();													// Focus on first one
		
		$("#notesSearch").on("keydown", function(e) {							// Handle filter
					var n=$("#notesTbl tr").length;								// Number of rows
					var patt=new RegExp($("#notesSearch").val());				// Pattern to find
					for (var i=0;i<n;++i) {										// For each row
						$("#ntx-"+i).css("color","black");						// Clear it
						if (($("#ntx-"+i).val()) && ($("#ntx-"+i).val().match(patt))) // If in there
							$("#ntx-"+i).css("color","red");					// Highlight it
						}
					});			
			
		$("#notesSave").on("click", function(e) {								// Handle save
					Login(SaveVideoNotes);										// Login and save
					});			

		$("#notesLoad").on("click", function(e) {								// Handle save
					GetTextBox("Login","Please type your username or email","",LoadVideoNotes)
					});			

		$("#nCloser").on("click", function(e) {									// Handle close
					playerNotes=false;											// Set flag
					VideoNotes();												// Save notes and kill dialog
					});			
	
		$("#notesTbl").on("keydown", function(e) {								// Handle key down
			var cap=false;														// Don't cap
			var rowNum=e.target.id.split("-")[1];								// Get rownum
			if ($("#"+e.target.id).val().length > 80)							// If past limit
				cap=true;														// Let's cap line
			if ((e.keyCode == 13) || (cap)) {									// Enter on capping a line
				var ts="color:#009900;cursor:pointer";							// Timecode style
				var ns="font-size:13px;border:none;background:none;width:100%;padding:0px;margin:0px";	// Note style	
				var id=$("#notesTbl tr").length;								// If of next row
				var str="<tr><td id='ntc-"+id+"' style='"+ts+"'>Type:</td><td><input id='ntx-"+id+"' type='input' style='"+ns+"'/></td></tr>";
				$("#notesTbl").append(str);										// Add row
				$("#ntx-"+id).focus();											// Focus on new one
				if ($("#notesPause").prop('checked') && !cap) 					// If checked and not capped
					RunPlayer("play");											// Resume player
				if (cap)														// If line is capped
					$("#ntc-"+id).text($("#ntc-"+rowNum).text());				// Set to same time
				}
			else if ((e.keyCode == 8) || (e.keyCode == 46)) {					// Delete
				var id="#"+e.target.id;											// Get id
				if ((!$(id).val()) && (id != "#ntx-0")) {						// No more chars left sand not 1st row
					id="ntx-"+(id.substr(5)-1);									// Last row										
					$("#"+id).focus();											// Focus there to prevent page back action
					$("#"+e.target.id).parent().parent().remove();				// Delete
					}			
				}
			else if (!$("#ntx-"+rowNum).val()) {								// A key and nothing in the field yet
				$("#ntc-"+rowNum).text(SecondsToTimecode(playerNow));			// Set new time
				if ($("#notesPause").prop('checked')) 							// If checked
					RunPlayer("pause");											// Pause player
				
				$("#ntc-"+rowNum).click(function(e){							// Add click handler
					   	var time=$("#"+e.target.id).text();						// Get time
						if (e.shiftKey)											// If shift key pressed
							$("#"+e.target.id).text(SecondsToTimecode(playerNow));	// Set new time
						else
							RunPlayer("play",TimecodeToSeconds(time));			// Cue player
						});
				
				$("#ntc-"+rowNum).dblclick(function(e){							// Add  d-click handler
					   	var time=$("#"+e.target.id).text();						// Get time
						RunPlayer("play",TimecodeToSeconds(time));				// Cue player
						})
				}
			});
	};

	function SaveVideoNotes()												// SAVE NOTES TO SERVER
	{
		var i,str="";
		var n=$("#notesTbl tr").length;											// Number of rows
		if (!n)																	// No notes
			return;																// Quit
		var dat={};
		var url=host+"saveuserdata.php";										// Base file
		dat["email"]=userName;													// Add email
		dat["password"]=password;												// Add password
		dat["show"]=curShow;													// Add shownum
		dat["replace"]="true";													// Replace contents
		for (i=0;i<n;++i) { 													// For each row
			if ($("#ntx-"+i).val())												// If something there
				str+=$("#ntc-"+i).text()+$("#ntx-"+i).val();					// Add row
			if (i != n-1)														// If not last line
				str+="|";														// Add divider
			}
		dat["event"]=str;														// Get notes
		$.ajax({ url:url,dataType:'text',type:"POST",crossDomain:true,data:dat});  	// Post data
		str="";
		for (i=0;i<n;++i) { 													// For each row
			if ($("#ntx-"+i).val())												// If something there
				str+=$("#ntc-"+i).text()+"\t"+$("#ntx-"+i).val()+"\n";			// Add row
			}
		console.log(str);
		Sound("ding");															// Ding
	}

	function LoadVideoNotes(name)											// LOAD NOTES FROM SERVER
	{
		var dat={};
		var url=host+"loaduserdata.php";										// Base file
		dat["email"]=name;														// Add email
		dat["show"]=curShow;													// Add shownum
		$.ajax({ url:url,dataType:'jsonp',data:dat});  							// Get data
	}

	function LoadUserData(notes)											// HANDLE INCOMING DATA LOAD
	{
		notesText=notes.data;													// Set notes
		VideoNotes(true);														// Redraw
	}

	function ConvertFromGoogleDrive(url)									// CONVERT GOOGLE DRIVE LINK TO DIRECT LINK
	{
		if (url && url.match(/drive\.google/i)) {								// A google drive image
			var id=url.match(/\?id=(.+)/i);										// Extract id
			if (!id)															// Nothing there
				id=url.match(/\/d\/(.*?)\//);									// Try this way
			if (id)																// An id found
				url="//drive.google.com/uc?export=view&id="+id[1];				// Construct 'direct' link
			}
		return url;																// Return link
	}

	
</script>
</body></html>
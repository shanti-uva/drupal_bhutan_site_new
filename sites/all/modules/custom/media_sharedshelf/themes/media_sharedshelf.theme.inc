<?php
/**
 * @file
 * Theme functions for the Media: SharedShelf module.
 */

/**
 * Implements theme preview style.
 *
 * @param array $variables
 *   The theme variables needed for this format style.
 *
 * @return string
 *   String output generated by applying this format style to the content.
 */
function theme_media_sharedshelf_preview_style($variables) {
  $variables['uri'] = media_sharedshelf_variable_get('preview_uri');
  return theme('media_sharedshelf_embed', $variables);
}

/**
 * Impements theme styles.
 *
 * @param array $variables
 *   The theme variables needed for this format style.
 *
 * @return string
 *   String output generated by applying this format style to the content.
 */
function theme_media_sharedshelf_styles($variables) {
  $style = $variables['style'];
  $variables['file'] = $variables['object'];
  $variables['uri'] = $variables['object']->uri;
  $variables['style_name'] = $style['name'];
  return theme('media_sharedshelf_embed', $variables);
}

/**
 * Implements the theme output for embedded output.
 *
 * @param array $variables
 *   The theme variables needed for this format style.
 *
 * @return string
 *   String output generated by applying this format style to the content.
 */
function theme_media_sharedshelf_embed($variables) {
  if (isset($variables['preset']) && isset($variables['object'])) {
    // Get preset information from the variables object.
    $preset_name = $variables[(string) 'preset'];
    $all_presets = $variables[(string) 'presets'];

    $preset = array(
      'effects' => $all_presets[(string) 'presets'][(string) $preset_name],
    );

    // Build the URL for display.
    $uri = $variables['uri'];
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $parts = $wrapper->get_parameters();

    $width = $height = 0;

    foreach ($preset['effects'] as $effect) {
      switch ($effect['name']) {
        case 'resize':
          $width = isset($effect['settings']['width']) ? $effect['settings']['width'] : NULL;
          $height = isset($effect['settings']['height']) ? $effect['settings']['height'] : NULL;
          break;
      }
    }
    if (isset($variables['object']->override)) {
      $override = $variables['object']->override;
      if (isset($override['width'])) {
        $width = $override['width'];
      }
      if (isset($override['height'])) {
        $height = $override['height'];
      }
    }

    $attributes = array();
    if ($width) {
      $attributes['width'] = $width;
    }
    if ($height) {
      $attributes['height'] = $height;
    }

    $output = theme('image', array(
      'path' => media_sharedshelf_image_url($parts['p']),
      'alt' => $variables['alt'],
      'title' => $variables['title'],
      'attributes' => $attributes,
      'getsize' => FALSE,
    ));
    return $output;
  }
}

/**
 * Implements theme field formatter styles.
 *
 * @param array $variables
 *   The theme variables needed for this format style.
 *
 * @return string
 *   String output generated by applying this format style to the content.
 */
function theme_media_sharedshelf_field_formatter_styles($variables) {
  $element = $variables['element'];
  $style = $variables['style'];
  $variables['file'] = $element['#item'];
  $variables['uri'] = $variables['file']['uri'];
  $variables['style_name'] = $style['name'];
  return theme('media_sharedshelf_embed', $variables);
}

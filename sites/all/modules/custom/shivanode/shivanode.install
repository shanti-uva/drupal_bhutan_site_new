<?php

/**
 * @file
 * Install file for shivanode module.
 *
 * The definition of the fields for the module is here,
 *
 */
 
 // default name for the SHIVA Rest Service used in hook_enable and hook_disable
define('SHIVA_SERVICE', 'get_shivanode');

/**
 * Implements hook_install().
 */
function shivanode_install() {
  $t = get_t();
  $shivanode= array(
    'type' => 'shivanode',
    'name' => $t('Shiva Visualization'),
    'base' => 'node_content',
    'description' => $t('Use Shiva visualizations for storing, editing, and displaying a Shanti Interactive Visualization.'),
    'body_label' => $t('Summary'),
    'custom' => TRUE,
  );
  
  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($shivanode);

  // Save the content type
  node_type_save($content_type);
  
  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_shivanode_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_shivanode_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';  // This is a node entity
    $instance['bundle'] = $shivanode['type'];  // Whose content-type (or bundle) is 'shivanode'
    field_create_instance($instance);
  }
  
  // disable comments for this content type doesn't seem to work
  variable_set('comment_shivanode', COMMENT_NODE_CLOSED);
  
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * node_example_install() and node_example_uninstall().
 * 
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
 
function _shivanode_installed_fields() {
  $t = get_t();
  return array(
    'shivanode_element_type' => array(
      'field_name'  => 'shivanode_element_type',
      'type' => 'list_integer',
      'cardinality' => '1',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values_function' => '_shivanode_element_typelist',
      ),
    ),
    'shivanode_subtype' => array(
      'field_name'  => 'shivanode_subtype',
      'type' => 'list_integer',
      'cardinality' => '1',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values_function' => '_shivanode_subtypelist',
      ),
    ),
    'shivanode_access' => array(
      'field_name'  => 'shivanode_access',
      'type' => 'list_integer',
      'cardinality' => '1',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values_function' => '_shivanode_access_modes',
      ),
    ),
    'shivanode_json' => array(
      'field_name' => 'shivanode_json',
      'type'        => 'text_long',
    ),
    'shivanode_description' => array(
      'field_name' => 'shivanode_description',
      'type' => 'text_with_summary',
    ),
    'shivanode_tags' => array(
      'field_name' => 'shivanode_tags',
      'type' => 'taxonomy_term_reference',
      'module' => 'taxonomy',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'tags',
            'parent' => '0',
          ),
        ),
      ),
    ),
  );
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * node_example_install() and node_example_uninstall().
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function _shivanode_installed_instances() {
  $t = get_t();
  return array(
    'shivanode_element_type' => array(
      'field_name'  => 'shivanode_element_type',
      'label'  => $t('Visualization Type'),
      'required' => 1,
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(
            'default_value' => 7,
          ),
          'type' => 'list_default',
          'weight' => 10,
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
        'default_value' => 6,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'type' => 'options_select',
        'settings' => array(
          'default_value' => 7,
        ),
        'weight' => 10,
      ),
    ),
    'shivanode_subtype' => array(
      'field_name'  => 'shivanode_subtype',
      'label'  => $t('Visualization Subtype'),
      'required' => 0,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'module' => 'list',
          'type' => 'list_default',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
        'default_value' => 1,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'type' => 'options_select',
      ),
    ),
    'shivanode_access' => array(
      'field_name'  => 'shivanode_access',
      'label'  => $t('Status'),
      'required' => 1,
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'list',
          'settings' => array(
            'default_value' => 1,
           ),
          'type' => 'list_default',
          'weight' => 15,
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
        'default_value' => 1,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'type' => 'options_select',
        'settings' => array(
          'default_value' => 1,
        ),
        'weight' => 15,
      ),
    ),
    'shivanode_json' => array(
      'field_name' => 'shivanode_json',
      'label'       => $t('Shiva Visualization'),
      'required' => 1,
      'display' => array(
        'default' => array(
          'module' => 'shivanode',
          'type' => 'shiva_visualizer',
          'settings' => array(
            'height' => SHIVA_IFRAME_HEIGHT,
            'width' => SHIVA_IFRAME_WIDTH,
            'context' => 'default',
          ),
          'weight' => 15,
        ),
        'teaser' => array(
          'module' => 'shivanode',
          'type' => 'shiva_visualizer',
          'settings' => array(
            'height' => SHIVA_IFRAME_HEIGHT_TEASER,
            'width' => SHIVA_IFRAME_WIDTH_TEASER,
            'context' => 'teaser',
          ),
          'weight' => 15,
        ),
      ),
      'widget'  => array(
        'type'   => 'text_textarea',
        'settings' => array(
          'rows' => 10,
        ),
        'weight' => 25,
      ),
    ),
    'shivanode_description' => array(
      'field_name' => 'shivanode_description',
      'label'       => $t('Description'),
      'module' => 'text',
      'required' => 0,
      'widget'      => array(
        'type'    => 'text_textarea_with_summary',
        'weight' => 35,
      ),
    ),
    'shivanode_tags' => array(
      'field_name' => 'shivanode_tags',
      'label'       => $t('Tags'),
      'module' => 'taxonomy',
      'widget'  => array(
        'type'   => 'taxonomy_autocomplete',
        'weight' => 40,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
 
function shivanode_uninstall() {
  // Delete the Shivanode view if it exists
  if (module_exists('views')) {
    $snview = views_get_view('shiva_elements');
    if (isset($snview)) {
      views_delete_view($snview);
    }
  }
  
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'shivanode'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_shivanode_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the node_example
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'shivanode');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('shivanode');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
  drupal_uninstall_schema('shivanode');
}

function shivanode_schema() {
  $schema['shivanode_links'] = array(
    'description' => t('A table linking Shiva visualization nodes with Shiva data nodes'),
    'fields' => array(
      'link_id' => array(
        'description' => t('The primary identifier for the link'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'sn_id' => array(
        'description' => t('The node id of the Shivanode visualization using the data'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
      'data_id' => array(
        'description' => t('The node id of the data node'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'created' => array(
        'description' => t('Date link created'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
    ),
    'unique keys' => array(
      'link_id'     => array('link_id'),
      'sn_id'     => array('sn_id'),
      ),
    'primary key' => array('link_id'),
  );
  return $schema;
}

// add table to database for links between sn and data
/*
function shivanode_update_7001() {
 * use as PHP code:
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module','shivanode') . '/shivanode.install';
  $schema = shivanode_schema();
  db_create_table('shivanode_links', $schema['shivanode_links']);
}
*/

function shivanode_enable() {
  shivanode_create_service();
}

/**
 *  Creates a REST api for http://shantivis.org/api/rest/shivanode/### where ### is the node number (shows all Druapl fields)
 * 
 *    FYI: URL for just SHIVA json is http://shantivis.org/data/json/### where ### is the node number (only contains SHIVA info fields)
 */
function shivanode_create_service() {
  $service_name = SHIVA_SERVICE;
  $endpoint = services_endpoint_load($service_name);
  $ea = array('installed', 'install');
  if (!$endpoint) {
    $endpoint = new stdClass();
    $endpoint->disabled = TRUE;
    $endpoint->api_version = 3;
    $endpoint->name = 'get_shivanode';
    $endpoint->server = 'rest_server';
    $endpoint->path = 'api/rest';
    $endpoint->authentication = array(
      'services' => 'services',
    );
    $endpoint->server_settings = array();
    $endpoint->resources = array(
      'shivanode' => array(
        'operations' => array(
          'retrieve' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
    );
    $endpoint->debug = 0;
  } 
  else {
    $endpoint->disabled = FALSE;
    $ea = array('enabled', 'enable');
  }
  services_endpoint_save($endpoint);
  $msg = services_endpoint_load($service_name) ? 
           "'$service_name' REST service " . $ea[0] . "!" : 
           "Unable to " . $ea[1] . " the REST service '$service_name'!";
  $mtyp = (strpos($msg, 'Unable') > -1) ? 'warning':'status';
  drupal_set_message(check_plain($msg), $mtyp);
}

function shivanode_disable() {
  $endpoint = services_endpoint_load(SHIVA_SERVICE);
  if ($endpoint) {
    $endpoint->disabled = TRUE;
    services_endpoint_save($endpoint);
  }
}

/**
 * Adds a generic image to the file system and creates a shivanode_teaser derrivative.
 */
function shivanode_add_gen_image($imgkey) {
	global $base_url; 
  $snimgdir = $base_url . '/' . drupal_get_path('module', 'shivanode') . '/images/';
	$imgfn = $imgkey . '.png';
	$path = 'public://shivanode';
	$url = $snimgdir . $imgfn;                // ADD URL to image on system 
	$file = system_retrieve_file($url, $path . '/' . $imgfn, TRUE, FILE_EXISTS_REPLACE);
	if(!empty($file->fid)) {
		variable_set($imgkey, $file->fid);
		$style = image_style_load('shiva_teaser');
		if($style) { 
			$source = 'public://shivanode/' . $imgfn;
			$destination = 'public://styles/shiva_teaser/public/shivanode/' . $imgfn;
			$res = image_style_create_derivative($style, $source, $destination);
			if(!$res) {
				drupal_set_message(t('Unable to create derrivative image for @fn (shivanode.install)', array('@fn' => $imgfn)), 'warning');
				return FALSE;
			}
		} else {
			drupal_set_message(t('No shiva_teaser image style to format image with.'), 'warning');
			return FALSE;
		}
	} else {
		drupal_set_message(t('Unable to create image file for @fn (shivanode.install)', array('@fn' => $imgfn)), 'warning');
		return FALSE;
	}
	return TRUE;
}

/**
 * Change the actual field sizes for the values in the data and revisions tables
 */
function shivanode_update_7000() {
  $table = 'field_data_shivanode_json';
  $field = $field_new = 'shivanode_json_value';
  $spec = array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  );
  db_change_field($table, $field, $field_new, $spec);
  $table = 'field_revision_shivanode_json';
  db_change_field($table, $field, $field_new, $spec);
}

/**
* Change the field definition in the field_config table to text_long
*/
function shivanode_update_7001() {
  $field = db_select('field_config', 'fc')
    ->fields('fc')
    ->condition('field_name', 'shivanode_json')
    ->execute()
    ->fetchAssoc();
  $def = $field['data']; // Get the data blob defining the field
  // Replace the max length definition with no settings
  $old = 's:8:"settings";a:1:{s:10:"max_length";i:2048;}';
  $new = 's:8:"settings";a:0:{}';
  $def = str_replace($old, $new, $def);
  // set new def and change type to text_long
  $num_updated = db_update('field_config')
    ->fields(array(
      'type' => 'text_long',
      'data' => $def,
    ))
    ->condition('field_name', 'shivanode_json')
    ->execute();
}

/**
* Change the description on the Data Popup list block so it doesn't match the recent shiva elements block.
*/
function shivanode_update_7002() {
  if (module_exists('views')) {
    $view = views_get_view('shiva_elements');
    if ($view) {
      $dblock = &$view->display['data_popup_block'];
      if($dblock) {
        $dopts = &$dblock->display_options;
        $dopts['block_description'] = "Shivanode Data Popup Block";
        views_save_view($view);
      }
    }
  }
}

/**
 * Update to the label of shivanode_access field instance, changing from "Privileges" to "Status"
 */
 
function shivanode_update_7003() {
  $instances = field_info_instances('node', 'shivanode');
  $safield = $instances['shivanode_access'];
  $safield['label'] = "Status";
  field_update_instance($safield);
}

/**
 * Update to the shiva_elements view paths, to change them from node/... to view/...
 */
 
function shivanode_update_7004() {
  return;
  /* shiva_elements or Shiva Visualizations views have been replaced  by the module/shiva_views_feature
  $vnm = 'shiva_elements';
  $view = views_get_view($vnm);
  $changed = array();
  foreach ($view->display as $d) {
    if (isset($d->display_options['path'])) {
      $path = $d->display_options['path'];
      if(strpos($path,'node/') > -1) {
        $newpath = str_replace('node/', 'view/', $path);
      }
      $d->display_options['path'] = $newpath;
      $changed[] = array($path, $newpath);
      drupal_set_message(t("Changed view path @PATH to @NEWPATH", array('@PATH' => $path, '@NEWPATH' => $newpath)));
    }
    if (count($changed) > 0) {
      $view->update();
      $view->save();
    }
  }
  
  $mtree = menu_tree_all_data('main-menu', NULL);
  $ltitles = array();
  foreach ($mtree as $k => $v) {
    $l = $v['link'];
    if(isset($l['link_path'])) {
      foreach($changed as $clink) {
        if ( $l['link_path'] == $clink[0] ) {
          $l['link_path'] = $clink[1];
          $l['router_path'] = $clink[1];
          menu_link_save($l);
          $ltitles[] = $l['link_title'];
        }
      }
    }
  }
  if(count($ltitles) > 0) {
    drupal_set_message(t("Updated paths to the following main menu links: @LINKS"), array('@LINKS' => implode(', ', $ltitles)));
  } */
}


/**
 * Add generic visualization thumbnails to public folder by copying images from shivanode images folder
 *    and setting the Drupal global variables to the resulting FID.
 */
 
function shivanode_update_7005() {
  module_load_include('inc', 'shivanode'); // load shivanode.inc for _shivanode_get_generic_image_info() function
  // Create the Shivanode public files folder
  $path = 'public://shivanode';
  if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('Unable to create the directory, @path. Please check that the files directory permissions are set correctly.'), 'warning');
    $path = NULL;
  }
  // Copy the generic visualization images into the Shivanode public folder and create file entities for them
  global $base_url;
  $snimgdir = $base_url . '/' . drupal_get_path('module', 'shivanode') . '/images/';
  $visimginfo = _shivanode_get_generic_image_info('LIST');
  foreach($visimginfo as $key => $varnm) {
    $imgfn = $varnm . '.png';
    $url = $snimgdir . $imgfn;
    $file = system_retrieve_file($url, $path . '/' . $imgfn, TRUE, FILE_EXISTS_REPLACE);
    variable_set($varnm, $file->fid);
		// Add shiva teaser style for image
		$style = image_style_load('shiva_teaser');
		if($style) { 
			$source = 'public://shivanode/' . $imgfn;
			$destination = 'public://styles/shiva_teaser/public/shivanode/' . $imgfn;
			image_style_create_derivative($style, $source, $destination);
		}
  }
  // Copy generic icons to shivanode public folder
  $snimgdir = drupal_get_path('module', 'shivanode') . '/images/';
  file_unmanaged_copy($snimgdir . 'pencil.png', 'public://shivanode/pencil.png');
  file_unmanaged_copy($snimgdir . 'trash.gif', 'public://shivanode/trash.gif');
  
/**
  //Generic code to add image at at latter time:
  global $base_url; 
  $imgkey = 'sngen-...';  // name of variable and image file REPLACE ...
  $imgfn = $imgkey . '.png';
  $path = 'public://shivanode';
  $url = '';                // ADD URL to image on system 
  $file = system_retrieve_file($url, $path . '/' . $imgfn, TRUE, FILE_EXISTS_REPLACE);
  variable_set($imgkey, $file->fid);
	$style = image_style_load('shiva_teaser');
	if($style) { 
		$source = 'public://shivanode/' . $imgfn;
		$destination = 'public://styles/shiva_teaser/public/shivanode/' . $imgfn;
		image_style_create_derivative($style, $source, $destination);
	}
*/
}

/**
 *   Add a custom field to shivanode content type for visualization subtypes. Admin will need to batch save all existing shivanodes to populate this field.
 */
function shivanode_update_7006() {
  if(!field_read_field('shivanode_subtype')) {
    
    module_load_include('inc', 'shivanode', 'includes/shivanode'); // load shivanode.inc for _shivanode_get_generic_image_info() function
    $t = get_t();
    $stype_field = array(
      'field_name'  => 'shivanode_subtype',
      'type' => 'list_integer',
      'cardinality' => '1',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'module' => 'list',
      'settings' => array(
        'allowed_values_function' => '_shivanode_subtypelist',
      ),
    );
    field_create_field($stype_field);
    
    $stype_instance = array(
      'field_name'  => 'shivanode_subtype',
      'label'  => $t('Visualization Subtype'),
      'required' => 0,
      'entity_type' => 'node',
      'bundle' => 'shivanode',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'module' => 'list',
          'type' => 'list_default',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
        'default_value' => 1,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'type' => 'options_select',
      ),
    );
    field_create_instance($stype_instance);
  }
}

/**
 *   Delete old SN editor url variables. Replaced by constants in shivanode.constants.inc
 */
function shivanode_update_7007() {
	$old_sn_vars = array(
		'shivanode_canvas_editor',
		'shivanode_chart_editor',
		'shivanode_chart_viewer',
		'shivanode_control_editor',
		'shivanode_data_editor',
		'shivanode_draw_editor',
		'shivanode_earth_editor',
		'shivanode_editor_url',
		'shivanode_graph_editor',
		'shivanode_image_editor',
		'shivanode_map_editor',
		'shivanode_network_editor',
		'shivanode_poster_editor',
		'shivanode_qmedia_editor',
		'shivanode_root_url',
		'shivanode_subway_editor',
		'shivanode_timeglider_editor',
		'shivanode_timeline_editor',
		'shivanode_video_editor',
		'shivanode_wcloud_editor'
	);
	foreach($old_sn_vars as $nm) {
		variable_del($nm);
	}
}

/**
 * 	Add thumbnail images for graph types and qmedia
 */
function shivanode_update_7008() {
	$imgkeys = array(
		'sngen-graph-chord', 
		'sngen-graph-network', 
		'sngen-graph-parallel', 
		'sngen-graph-stream', 
		'sngen-graph-tree', 
		'sngen-qmedia'
	);
	foreach ($imgkeys as $imgkey) {
		shivanode_add_gen_image($imgkey);
	}
}


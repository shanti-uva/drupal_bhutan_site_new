<?php

function transcripts_xslt_init()
{
  module_load_include('inc', 'transcripts_xslt', 'transcripts_xslt.admin');
}

function transcripts_xslt_menu()
{
  $items = array();

  $items['admin/config/user-interface/transcripts/transcripts_xslt'] = array(
    'title' => 'Transcripts XSLT',
    'description' => t('Transcripts XSLT settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transcripts_xslt_settings_form'),
    'access arguments' => array('administer transcripts'),
    'file' => 'transcripts_xslt.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function transcripts_xslt_get_transformer($file)
{
  $dot = strrpos($file->uri, '.');
  $ext = $dot === FALSE ? '' : strtolower(substr($file->uri, $dot + 1));
  $version = variable_get('transcripts_xslt_version', '2.0') == '1' ? '1_' : '';
  $transformer_fid = variable_get('transcripts_xslt_' . $version.$ext . '_transformer', '');
  if ($transformer_fid) {
    return file_load($transformer_fid);
  } else {
    return false;
  }
}

function transcripts_xslt_as_tcus($file, $params = array())
{
  $transformer = transcripts_xslt_get_transformer($file);
  if (!$transformer) {
    watchdog('Transcripts XSLT', "[file/%fid] No transformer found.", array('%fid' => $file->fid), WATCHDOG_INFO);
    return false;
  }

  $dot = strrpos($file->uri, '.');
  $ext = $dot === FALSE ? '' : substr($file->uri, $dot + 1);

  $version = variable_get('transcripts_xslt_version', '2.0');
  if ($version == '2.0') {
    switch ($ext) {
      case 'txt':
        $filepath = drupal_realpath($file->uri);
        // Check that we have a valid filepath.
        if (!$filepath || !is_file($filepath)) {
          watchdog('Transcripts XSLT', '[file/%fid] %filepath is not a valid file path.', array('%fid' => $file->fid, '%filepath' => $file->uri), WATCHDOG_WARNING);
          return false;
        }
        $params['file'] = $filepath;
        $params['tierNames'] = variable_get('transcripts_xslt_toolbox_mappings', 'tx|ts_content_qya, mb|ts_content_morph, ge|ts_content_igt, ft|ts_content_epo');

        $source = ''; //transforming text, no source XML
        $it = 'toolbox'; //apply this template
        break;
      case 'srt':
        $filepath = drupal_realpath($file->uri);
        // Check that we have a valid filepath.
        if (!$filepath || !is_file($filepath)) {
          watchdog('Transcripts XSLT', '[file/%fid] %filepath is not a valid file path.', array('%fid' => $file->fid, '%filepath' => $file->uri), WATCHDOG_WARNING);
          return false;
        }
        $params['file'] = $filepath;
        $params['speaker_display_id'] = 'ss_speaker'; //name of "language unknown" speaker display id

        $source = ''; //transforming text, no source XML
        $it = 'srt'; //apply this template
        break;
      case 'xml':
        $source = $file; //source XML
        $it = ''; //apply stylesheet
        break;
    }
    drupal_alter('transcripts_xslt_saxon_params', $params, $file);

    $xsl = drupal_realpath($transformer->uri);
    $xml = transcripts_xslt_saxon_shell_xml($xsl, $source, $it, $params);
    if ($xml === false) {
      watchdog('Transcripts XSLT', "[file/%fid] Transformation error - invalid XML.", array('%fid' => $file->fid), WATCHDOG_WARNING);
      return false;
    } else {
      watchdog('Transcripts XSLT', "[file/%fid] Transformation successful.", array('%fid' => $file->fid), WATCHDOG_INFO);
      return json_decode(json_encode($xml), TRUE);
    }
  }
  else { // XSLT 1.0, use PHP
    $xsl = new DOMDocument();
    if (!$xsl->load(drupal_realpath($transformer->uri))) {
      watchdog('Transcripts XSLT', "[file/%fid] Transformation error: transformer is not valid XML.", array('%fid' => $transformer->fid), WATCHDOG_WARNING);
      return false;
    }
    switch ($ext) {
      case 'xml':
        $source = new DOMDocument();
        if (!$source->load(drupal_realpath($file->uri))) {
          watchdog('Transcripts XSLT', "[file/%fid] Transformation error: transcript is not valid XML.", array('%fid' => $file->fid), WATCHDOG_WARNING);
          return false;
        }
        break;
      case 'srt':
      case 'txt':
        $content = file_get_contents(drupal_realpath($file->uri));
        if (!$content) {
          watchdog('Transcripts XSLT', "[file/%fid] Transformation error: no content in transcript.", array('%fid' => $file->fid), WATCHDOG_WARNING);
          return false;
        }
        $source = new DOMDocument();
        $source->appendChild($source->createElement('text', trim($content)));
        break;
    }
    $params['tierNames'] = variable_get('transcripts_xslt_1_toolbox_mappings', 'tx|ts_content_qya, mb|ts_content_morph, ge|ts_content_igt, ft|ts_content_epo');
    $proc = new XSLTProcessor();
    $proc->importStylesheet($xsl);
    $proc->setParameter('', $params);
    $xml = $proc->transformToXML($source);
    if ($xml === FALSE) {
      watchdog('Transcripts XSLT', "[file/%fid] Transformation error: transformer is not proper XSL.", array('%fid' => $file->fid), WATCHDOG_WARNING);
      return false;
    }
    return json_decode(json_encode(simplexml_load_string($xml)), TRUE);
  }
}

function transcripts_xslt_saxon_shell_xml($xsl, $source = '', $it = '', $params = array())
{
  $output = transcripts_xslt_saxon_shell($xsl, $source, $it, $params);
  return simplexml_load_string($output);
}

function transcripts_xslt_saxon_shell($xsl, $source = '', $it = '', $params = array())
{
  $saxon = realpath(variable_get('transcripts_xslt_saxon_jar', 'sites/all/libraries/saxon/saxon9he.jar'));
  if (!$saxon || !is_file($saxon)) {
    throw new Exception(t('Invalid path or filename for saxon application jar.'));
  }

  if ($source) {
    $filepath = drupal_realpath($source->uri);
    // Check that we have a valid filepath.
    if (!$filepath || !is_file($filepath)) {
      watchdog('Transcripts XSLT', '[file/%fid] %filepath is not a valid file path.', array('%fid' => $source->fid, '%filepath' => $source->uri), WATCHDOG_WARNING);
      return FALSE;
    }
    // Support UTF-8 encoded filenames.
    if (mb_detect_encoding($filepath, 'ASCII,UTF-8', true) == 'UTF-8') {
      $cmd .= 'export LANG="en_US.utf-8"; ';
      setlocale(LC_CTYPE, 'UTF8', 'en_US.UTF-8');
    }
  }

  $par = '';
  foreach ($params as $key => $value) {
    $par .= $key . "=" . escapeshellarg($value) . " ";
  }

  $cmd = '';
  // Add a work-around for a MAMP bug + java 1.5.
  if (strpos(ini_get('extension_dir'), 'MAMP/')) {
    $cmd .= 'export DYLD_LIBRARY_PATH=""; ';
  }

  // By default force UTF-8 output
  $cmd .= escapeshellcmd(variable_get('transcripts_xslt_java', 'java'))
    . ' ' . escapeshellarg(variable_get('transcripts_xslt_java_opts', '-Dfile.encoding=UTF8'))
    . ' -jar ' . escapeshellarg($saxon)
    . ' -xsl:' . escapeshellarg($xsl);

  if ($source) $cmd .= ' -s:' . escapeshellarg($filepath);
  if ($it) $cmd .= ' -it:' . escapeshellarg($it);
  if ($par) $cmd .= ' ' . $par;
  //. ' 2>&1'; //for debugging

  watchdog('Transcripts XSLT', "$cmd", NULL, WATCHDOG_DEBUG);
  return shell_exec($cmd);
}
